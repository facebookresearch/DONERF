


#ifndef INCLUDED_GL_API
#define INCLUDED_GL_API

#pragma once

#include <cstddef>
#include <cstdint>

#include <win32/platform.h>
#include <win32/glcore.h>


#ifdef __cplusplus
extern "C"
{
#endif
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef signed char GLbyte;
typedef short GLshort;
typedef int GLint;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned int GLuint;
typedef int GLsizei;
typedef float GLfloat;
typedef double GLdouble;
typedef char GLchar;
typedef ptrdiff_t GLintptr;
typedef ptrdiff_t GLsizeiptr;
typedef int64_t GLint64;
typedef uint64_t GLuint64;
typedef struct __GLsync *GLsync;
typedef void (APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);

const GLbitfield GL_CURRENT_BIT = 0x00000001;
const GLbitfield GL_POINT_BIT = 0x00000002;
const GLbitfield GL_LINE_BIT = 0x00000004;
const GLbitfield GL_POLYGON_BIT = 0x00000008;
const GLbitfield GL_POLYGON_STIPPLE_BIT = 0x00000010;
const GLbitfield GL_PIXEL_MODE_BIT = 0x00000020;
const GLbitfield GL_LIGHTING_BIT = 0x00000040;
const GLbitfield GL_FOG_BIT = 0x00000080;
const GLbitfield GL_DEPTH_BUFFER_BIT = 0x00000100;
const GLbitfield GL_ACCUM_BUFFER_BIT = 0x00000200;
const GLbitfield GL_STENCIL_BUFFER_BIT = 0x00000400;
const GLbitfield GL_VIEWPORT_BIT = 0x00000800;
const GLbitfield GL_TRANSFORM_BIT = 0x00001000;
const GLbitfield GL_ENABLE_BIT = 0x00002000;
const GLbitfield GL_COLOR_BUFFER_BIT = 0x00004000;
const GLbitfield GL_HINT_BIT = 0x00008000;
const GLbitfield GL_EVAL_BIT = 0x00010000;
const GLbitfield GL_LIST_BIT = 0x00020000;
const GLbitfield GL_TEXTURE_BIT = 0x00040000;
const GLbitfield GL_SCISSOR_BIT = 0x00080000;
const GLbitfield GL_MULTISAMPLE_BIT = 0x20000000;
const GLbitfield GL_ALL_ATTRIB_BITS = 0xFFFFFFFF;
const GLbitfield GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
const GLbitfield GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
const GLbitfield GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
const GLbitfield GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
const GLbitfield GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
const GLbitfield GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
const GLbitfield GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
const GLbitfield GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
const GLbitfield GL_MAP_READ_BIT = 0x0001;
const GLbitfield GL_MAP_WRITE_BIT = 0x0002;
const GLbitfield GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
const GLbitfield GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
const GLbitfield GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
const GLbitfield GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
const GLbitfield GL_MAP_PERSISTENT_BIT = 0x0040;
const GLbitfield GL_MAP_COHERENT_BIT = 0x0080;
const GLbitfield GL_DYNAMIC_STORAGE_BIT = 0x0100;
const GLbitfield GL_CLIENT_STORAGE_BIT = 0x0200;
const GLbitfield GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
const GLbitfield GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
const GLbitfield GL_UNIFORM_BARRIER_BIT = 0x00000004;
const GLbitfield GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
const GLbitfield GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
const GLbitfield GL_COMMAND_BARRIER_BIT = 0x00000040;
const GLbitfield GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
const GLbitfield GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
const GLbitfield GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
const GLbitfield GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
const GLbitfield GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
const GLbitfield GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
const GLbitfield GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
const GLbitfield GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
const GLbitfield GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000;
const GLbitfield GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
const GLbitfield GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
const GLbitfield GL_VERTEX_SHADER_BIT = 0x00000001;
const GLbitfield GL_FRAGMENT_SHADER_BIT = 0x00000002;
const GLbitfield GL_GEOMETRY_SHADER_BIT = 0x00000004;
const GLbitfield GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
const GLbitfield GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
const GLbitfield GL_COMPUTE_SHADER_BIT = 0x00000020;
const GLbitfield GL_ALL_SHADER_BITS = 0xFFFFFFFF;
const GLenum GL_FALSE = 0;
const GLenum GL_NO_ERROR = 0;
const GLenum GL_ZERO = 0;
const GLenum GL_NONE = 0;
const GLenum GL_TRUE = 1;
const GLenum GL_ONE = 1;
const GLenum GL_INVALID_INDEX = 0xFFFFFFFFU;
const unsigned long long GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFFULL;
const GLenum GL_POINTS = 0x0000;
const GLenum GL_LINES = 0x0001;
const GLenum GL_LINE_LOOP = 0x0002;
const GLenum GL_LINE_STRIP = 0x0003;
const GLenum GL_TRIANGLES = 0x0004;
const GLenum GL_TRIANGLE_STRIP = 0x0005;
const GLenum GL_TRIANGLE_FAN = 0x0006;
const GLenum GL_QUADS = 0x0007;
const GLenum GL_QUAD_STRIP = 0x0008;
const GLenum GL_POLYGON = 0x0009;
const GLenum GL_LINES_ADJACENCY = 0x000A;
const GLenum GL_LINE_STRIP_ADJACENCY = 0x000B;
const GLenum GL_TRIANGLES_ADJACENCY = 0x000C;
const GLenum GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
const GLenum GL_PATCHES = 0x000E;
const GLenum GL_ACCUM = 0x0100;
const GLenum GL_LOAD = 0x0101;
const GLenum GL_RETURN = 0x0102;
const GLenum GL_MULT = 0x0103;
const GLenum GL_ADD = 0x0104;
const GLenum GL_NEVER = 0x0200;
const GLenum GL_LESS = 0x0201;
const GLenum GL_EQUAL = 0x0202;
const GLenum GL_LEQUAL = 0x0203;
const GLenum GL_GREATER = 0x0204;
const GLenum GL_NOTEQUAL = 0x0205;
const GLenum GL_GEQUAL = 0x0206;
const GLenum GL_ALWAYS = 0x0207;
const GLenum GL_SRC_COLOR = 0x0300;
const GLenum GL_ONE_MINUS_SRC_COLOR = 0x0301;
const GLenum GL_SRC_ALPHA = 0x0302;
const GLenum GL_ONE_MINUS_SRC_ALPHA = 0x0303;
const GLenum GL_DST_ALPHA = 0x0304;
const GLenum GL_ONE_MINUS_DST_ALPHA = 0x0305;
const GLenum GL_DST_COLOR = 0x0306;
const GLenum GL_ONE_MINUS_DST_COLOR = 0x0307;
const GLenum GL_SRC_ALPHA_SATURATE = 0x0308;
const GLenum GL_FRONT_LEFT = 0x0400;
const GLenum GL_FRONT_RIGHT = 0x0401;
const GLenum GL_BACK_LEFT = 0x0402;
const GLenum GL_BACK_RIGHT = 0x0403;
const GLenum GL_FRONT = 0x0404;
const GLenum GL_BACK = 0x0405;
const GLenum GL_LEFT = 0x0406;
const GLenum GL_RIGHT = 0x0407;
const GLenum GL_FRONT_AND_BACK = 0x0408;
const GLenum GL_AUX0 = 0x0409;
const GLenum GL_AUX1 = 0x040A;
const GLenum GL_AUX2 = 0x040B;
const GLenum GL_AUX3 = 0x040C;
const GLenum GL_INVALID_ENUM = 0x0500;
const GLenum GL_INVALID_VALUE = 0x0501;
const GLenum GL_INVALID_OPERATION = 0x0502;
const GLenum GL_STACK_OVERFLOW = 0x0503;
const GLenum GL_STACK_UNDERFLOW = 0x0504;
const GLenum GL_OUT_OF_MEMORY = 0x0505;
const GLenum GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
const GLenum GL_CONTEXT_LOST = 0x0507;
const GLenum GL_2D = 0x0600;
const GLenum GL_3D = 0x0601;
const GLenum GL_3D_COLOR = 0x0602;
const GLenum GL_3D_COLOR_TEXTURE = 0x0603;
const GLenum GL_4D_COLOR_TEXTURE = 0x0604;
const GLenum GL_PASS_THROUGH_TOKEN = 0x0700;
const GLenum GL_POINT_TOKEN = 0x0701;
const GLenum GL_LINE_TOKEN = 0x0702;
const GLenum GL_POLYGON_TOKEN = 0x0703;
const GLenum GL_BITMAP_TOKEN = 0x0704;
const GLenum GL_DRAW_PIXEL_TOKEN = 0x0705;
const GLenum GL_COPY_PIXEL_TOKEN = 0x0706;
const GLenum GL_LINE_RESET_TOKEN = 0x0707;
const GLenum GL_EXP = 0x0800;
const GLenum GL_EXP2 = 0x0801;
const GLenum GL_CW = 0x0900;
const GLenum GL_CCW = 0x0901;
const GLenum GL_COEFF = 0x0A00;
const GLenum GL_ORDER = 0x0A01;
const GLenum GL_DOMAIN = 0x0A02;
const GLenum GL_CURRENT_COLOR = 0x0B00;
const GLenum GL_CURRENT_INDEX = 0x0B01;
const GLenum GL_CURRENT_NORMAL = 0x0B02;
const GLenum GL_CURRENT_TEXTURE_COORDS = 0x0B03;
const GLenum GL_CURRENT_RASTER_COLOR = 0x0B04;
const GLenum GL_CURRENT_RASTER_INDEX = 0x0B05;
const GLenum GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
const GLenum GL_CURRENT_RASTER_POSITION = 0x0B07;
const GLenum GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
const GLenum GL_CURRENT_RASTER_DISTANCE = 0x0B09;
const GLenum GL_POINT_SMOOTH = 0x0B10;
const GLenum GL_POINT_SIZE = 0x0B11;
const GLenum GL_POINT_SIZE_RANGE = 0x0B12;
const GLenum GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
const GLenum GL_POINT_SIZE_GRANULARITY = 0x0B13;
const GLenum GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
const GLenum GL_LINE_SMOOTH = 0x0B20;
const GLenum GL_LINE_WIDTH = 0x0B21;
const GLenum GL_LINE_WIDTH_RANGE = 0x0B22;
const GLenum GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
const GLenum GL_LINE_WIDTH_GRANULARITY = 0x0B23;
const GLenum GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
const GLenum GL_LINE_STIPPLE = 0x0B24;
const GLenum GL_LINE_STIPPLE_PATTERN = 0x0B25;
const GLenum GL_LINE_STIPPLE_REPEAT = 0x0B26;
const GLenum GL_LIST_MODE = 0x0B30;
const GLenum GL_MAX_LIST_NESTING = 0x0B31;
const GLenum GL_LIST_BASE = 0x0B32;
const GLenum GL_LIST_INDEX = 0x0B33;
const GLenum GL_POLYGON_MODE = 0x0B40;
const GLenum GL_POLYGON_SMOOTH = 0x0B41;
const GLenum GL_POLYGON_STIPPLE = 0x0B42;
const GLenum GL_EDGE_FLAG = 0x0B43;
const GLenum GL_CULL_FACE = 0x0B44;
const GLenum GL_CULL_FACE_MODE = 0x0B45;
const GLenum GL_FRONT_FACE = 0x0B46;
const GLenum GL_LIGHTING = 0x0B50;
const GLenum GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
const GLenum GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
const GLenum GL_LIGHT_MODEL_AMBIENT = 0x0B53;
const GLenum GL_SHADE_MODEL = 0x0B54;
const GLenum GL_COLOR_MATERIAL_FACE = 0x0B55;
const GLenum GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
const GLenum GL_COLOR_MATERIAL = 0x0B57;
const GLenum GL_FOG = 0x0B60;
const GLenum GL_FOG_INDEX = 0x0B61;
const GLenum GL_FOG_DENSITY = 0x0B62;
const GLenum GL_FOG_START = 0x0B63;
const GLenum GL_FOG_END = 0x0B64;
const GLenum GL_FOG_MODE = 0x0B65;
const GLenum GL_FOG_COLOR = 0x0B66;
const GLenum GL_DEPTH_RANGE = 0x0B70;
const GLenum GL_DEPTH_TEST = 0x0B71;
const GLenum GL_DEPTH_WRITEMASK = 0x0B72;
const GLenum GL_DEPTH_CLEAR_VALUE = 0x0B73;
const GLenum GL_DEPTH_FUNC = 0x0B74;
const GLenum GL_ACCUM_CLEAR_VALUE = 0x0B80;
const GLenum GL_STENCIL_TEST = 0x0B90;
const GLenum GL_STENCIL_CLEAR_VALUE = 0x0B91;
const GLenum GL_STENCIL_FUNC = 0x0B92;
const GLenum GL_STENCIL_VALUE_MASK = 0x0B93;
const GLenum GL_STENCIL_FAIL = 0x0B94;
const GLenum GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
const GLenum GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
const GLenum GL_STENCIL_REF = 0x0B97;
const GLenum GL_STENCIL_WRITEMASK = 0x0B98;
const GLenum GL_MATRIX_MODE = 0x0BA0;
const GLenum GL_NORMALIZE = 0x0BA1;
const GLenum GL_VIEWPORT = 0x0BA2;
const GLenum GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
const GLenum GL_PROJECTION_STACK_DEPTH = 0x0BA4;
const GLenum GL_TEXTURE_STACK_DEPTH = 0x0BA5;
const GLenum GL_MODELVIEW_MATRIX = 0x0BA6;
const GLenum GL_PROJECTION_MATRIX = 0x0BA7;
const GLenum GL_TEXTURE_MATRIX = 0x0BA8;
const GLenum GL_ATTRIB_STACK_DEPTH = 0x0BB0;
const GLenum GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
const GLenum GL_ALPHA_TEST = 0x0BC0;
const GLenum GL_ALPHA_TEST_FUNC = 0x0BC1;
const GLenum GL_ALPHA_TEST_REF = 0x0BC2;
const GLenum GL_DITHER = 0x0BD0;
const GLenum GL_BLEND_DST = 0x0BE0;
const GLenum GL_BLEND_SRC = 0x0BE1;
const GLenum GL_BLEND = 0x0BE2;
const GLenum GL_LOGIC_OP_MODE = 0x0BF0;
const GLenum GL_INDEX_LOGIC_OP = 0x0BF1;
const GLenum GL_LOGIC_OP = 0x0BF1;
const GLenum GL_COLOR_LOGIC_OP = 0x0BF2;
const GLenum GL_AUX_BUFFERS = 0x0C00;
const GLenum GL_DRAW_BUFFER = 0x0C01;
const GLenum GL_READ_BUFFER = 0x0C02;
const GLenum GL_SCISSOR_BOX = 0x0C10;
const GLenum GL_SCISSOR_TEST = 0x0C11;
const GLenum GL_INDEX_CLEAR_VALUE = 0x0C20;
const GLenum GL_INDEX_WRITEMASK = 0x0C21;
const GLenum GL_COLOR_CLEAR_VALUE = 0x0C22;
const GLenum GL_COLOR_WRITEMASK = 0x0C23;
const GLenum GL_INDEX_MODE = 0x0C30;
const GLenum GL_RGBA_MODE = 0x0C31;
const GLenum GL_DOUBLEBUFFER = 0x0C32;
const GLenum GL_STEREO = 0x0C33;
const GLenum GL_RENDER_MODE = 0x0C40;
const GLenum GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
const GLenum GL_POINT_SMOOTH_HINT = 0x0C51;
const GLenum GL_LINE_SMOOTH_HINT = 0x0C52;
const GLenum GL_POLYGON_SMOOTH_HINT = 0x0C53;
const GLenum GL_FOG_HINT = 0x0C54;
const GLenum GL_TEXTURE_GEN_S = 0x0C60;
const GLenum GL_TEXTURE_GEN_T = 0x0C61;
const GLenum GL_TEXTURE_GEN_R = 0x0C62;
const GLenum GL_TEXTURE_GEN_Q = 0x0C63;
const GLenum GL_PIXEL_MAP_I_TO_I = 0x0C70;
const GLenum GL_PIXEL_MAP_S_TO_S = 0x0C71;
const GLenum GL_PIXEL_MAP_I_TO_R = 0x0C72;
const GLenum GL_PIXEL_MAP_I_TO_G = 0x0C73;
const GLenum GL_PIXEL_MAP_I_TO_B = 0x0C74;
const GLenum GL_PIXEL_MAP_I_TO_A = 0x0C75;
const GLenum GL_PIXEL_MAP_R_TO_R = 0x0C76;
const GLenum GL_PIXEL_MAP_G_TO_G = 0x0C77;
const GLenum GL_PIXEL_MAP_B_TO_B = 0x0C78;
const GLenum GL_PIXEL_MAP_A_TO_A = 0x0C79;
const GLenum GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
const GLenum GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
const GLenum GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
const GLenum GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
const GLenum GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
const GLenum GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
const GLenum GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
const GLenum GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
const GLenum GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
const GLenum GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
const GLenum GL_UNPACK_SWAP_BYTES = 0x0CF0;
const GLenum GL_UNPACK_LSB_FIRST = 0x0CF1;
const GLenum GL_UNPACK_ROW_LENGTH = 0x0CF2;
const GLenum GL_UNPACK_SKIP_ROWS = 0x0CF3;
const GLenum GL_UNPACK_SKIP_PIXELS = 0x0CF4;
const GLenum GL_UNPACK_ALIGNMENT = 0x0CF5;
const GLenum GL_PACK_SWAP_BYTES = 0x0D00;
const GLenum GL_PACK_LSB_FIRST = 0x0D01;
const GLenum GL_PACK_ROW_LENGTH = 0x0D02;
const GLenum GL_PACK_SKIP_ROWS = 0x0D03;
const GLenum GL_PACK_SKIP_PIXELS = 0x0D04;
const GLenum GL_PACK_ALIGNMENT = 0x0D05;
const GLenum GL_MAP_COLOR = 0x0D10;
const GLenum GL_MAP_STENCIL = 0x0D11;
const GLenum GL_INDEX_SHIFT = 0x0D12;
const GLenum GL_INDEX_OFFSET = 0x0D13;
const GLenum GL_RED_SCALE = 0x0D14;
const GLenum GL_RED_BIAS = 0x0D15;
const GLenum GL_ZOOM_X = 0x0D16;
const GLenum GL_ZOOM_Y = 0x0D17;
const GLenum GL_GREEN_SCALE = 0x0D18;
const GLenum GL_GREEN_BIAS = 0x0D19;
const GLenum GL_BLUE_SCALE = 0x0D1A;
const GLenum GL_BLUE_BIAS = 0x0D1B;
const GLenum GL_ALPHA_SCALE = 0x0D1C;
const GLenum GL_ALPHA_BIAS = 0x0D1D;
const GLenum GL_DEPTH_SCALE = 0x0D1E;
const GLenum GL_DEPTH_BIAS = 0x0D1F;
const GLenum GL_MAX_EVAL_ORDER = 0x0D30;
const GLenum GL_MAX_LIGHTS = 0x0D31;
const GLenum GL_MAX_CLIP_PLANES = 0x0D32;
const GLenum GL_MAX_CLIP_DISTANCES = 0x0D32;
const GLenum GL_MAX_TEXTURE_SIZE = 0x0D33;
const GLenum GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
const GLenum GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
const GLenum GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
const GLenum GL_MAX_NAME_STACK_DEPTH = 0x0D37;
const GLenum GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
const GLenum GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
const GLenum GL_MAX_VIEWPORT_DIMS = 0x0D3A;
const GLenum GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
const GLenum GL_SUBPIXEL_BITS = 0x0D50;
const GLenum GL_INDEX_BITS = 0x0D51;
const GLenum GL_RED_BITS = 0x0D52;
const GLenum GL_GREEN_BITS = 0x0D53;
const GLenum GL_BLUE_BITS = 0x0D54;
const GLenum GL_ALPHA_BITS = 0x0D55;
const GLenum GL_DEPTH_BITS = 0x0D56;
const GLenum GL_STENCIL_BITS = 0x0D57;
const GLenum GL_ACCUM_RED_BITS = 0x0D58;
const GLenum GL_ACCUM_GREEN_BITS = 0x0D59;
const GLenum GL_ACCUM_BLUE_BITS = 0x0D5A;
const GLenum GL_ACCUM_ALPHA_BITS = 0x0D5B;
const GLenum GL_NAME_STACK_DEPTH = 0x0D70;
const GLenum GL_AUTO_NORMAL = 0x0D80;
const GLenum GL_MAP1_COLOR_4 = 0x0D90;
const GLenum GL_MAP1_INDEX = 0x0D91;
const GLenum GL_MAP1_NORMAL = 0x0D92;
const GLenum GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
const GLenum GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
const GLenum GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
const GLenum GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
const GLenum GL_MAP1_VERTEX_3 = 0x0D97;
const GLenum GL_MAP1_VERTEX_4 = 0x0D98;
const GLenum GL_MAP2_COLOR_4 = 0x0DB0;
const GLenum GL_MAP2_INDEX = 0x0DB1;
const GLenum GL_MAP2_NORMAL = 0x0DB2;
const GLenum GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
const GLenum GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
const GLenum GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
const GLenum GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
const GLenum GL_MAP2_VERTEX_3 = 0x0DB7;
const GLenum GL_MAP2_VERTEX_4 = 0x0DB8;
const GLenum GL_MAP1_GRID_DOMAIN = 0x0DD0;
const GLenum GL_MAP1_GRID_SEGMENTS = 0x0DD1;
const GLenum GL_MAP2_GRID_DOMAIN = 0x0DD2;
const GLenum GL_MAP2_GRID_SEGMENTS = 0x0DD3;
const GLenum GL_TEXTURE_1D = 0x0DE0;
const GLenum GL_TEXTURE_2D = 0x0DE1;
const GLenum GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
const GLenum GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
const GLenum GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
const GLenum GL_SELECTION_BUFFER_POINTER = 0x0DF3;
const GLenum GL_SELECTION_BUFFER_SIZE = 0x0DF4;
const GLenum GL_TEXTURE_WIDTH = 0x1000;
const GLenum GL_TEXTURE_HEIGHT = 0x1001;
const GLenum GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
const GLenum GL_TEXTURE_COMPONENTS = 0x1003;
const GLenum GL_TEXTURE_BORDER_COLOR = 0x1004;
const GLenum GL_TEXTURE_BORDER = 0x1005;
const GLenum GL_TEXTURE_TARGET = 0x1006;
const GLenum GL_DONT_CARE = 0x1100;
const GLenum GL_FASTEST = 0x1101;
const GLenum GL_NICEST = 0x1102;
const GLenum GL_AMBIENT = 0x1200;
const GLenum GL_DIFFUSE = 0x1201;
const GLenum GL_SPECULAR = 0x1202;
const GLenum GL_POSITION = 0x1203;
const GLenum GL_SPOT_DIRECTION = 0x1204;
const GLenum GL_SPOT_EXPONENT = 0x1205;
const GLenum GL_SPOT_CUTOFF = 0x1206;
const GLenum GL_CONSTANT_ATTENUATION = 0x1207;
const GLenum GL_LINEAR_ATTENUATION = 0x1208;
const GLenum GL_QUADRATIC_ATTENUATION = 0x1209;
const GLenum GL_COMPILE = 0x1300;
const GLenum GL_COMPILE_AND_EXECUTE = 0x1301;
const GLenum GL_BYTE = 0x1400;
const GLenum GL_UNSIGNED_BYTE = 0x1401;
const GLenum GL_SHORT = 0x1402;
const GLenum GL_UNSIGNED_SHORT = 0x1403;
const GLenum GL_INT = 0x1404;
const GLenum GL_UNSIGNED_INT = 0x1405;
const GLenum GL_FLOAT = 0x1406;
const GLenum GL_2_BYTES = 0x1407;
const GLenum GL_3_BYTES = 0x1408;
const GLenum GL_4_BYTES = 0x1409;
const GLenum GL_DOUBLE = 0x140A;
const GLenum GL_HALF_FLOAT = 0x140B;
const GLenum GL_FIXED = 0x140C;
const GLenum GL_CLEAR = 0x1500;
const GLenum GL_AND = 0x1501;
const GLenum GL_AND_REVERSE = 0x1502;
const GLenum GL_COPY = 0x1503;
const GLenum GL_AND_INVERTED = 0x1504;
const GLenum GL_NOOP = 0x1505;
const GLenum GL_XOR = 0x1506;
const GLenum GL_OR = 0x1507;
const GLenum GL_NOR = 0x1508;
const GLenum GL_EQUIV = 0x1509;
const GLenum GL_INVERT = 0x150A;
const GLenum GL_OR_REVERSE = 0x150B;
const GLenum GL_COPY_INVERTED = 0x150C;
const GLenum GL_OR_INVERTED = 0x150D;
const GLenum GL_NAND = 0x150E;
const GLenum GL_SET = 0x150F;
const GLenum GL_EMISSION = 0x1600;
const GLenum GL_SHININESS = 0x1601;
const GLenum GL_AMBIENT_AND_DIFFUSE = 0x1602;
const GLenum GL_COLOR_INDEXES = 0x1603;
const GLenum GL_MODELVIEW = 0x1700;
const GLenum GL_PROJECTION = 0x1701;
const GLenum GL_TEXTURE = 0x1702;
const GLenum GL_COLOR = 0x1800;
const GLenum GL_DEPTH = 0x1801;
const GLenum GL_STENCIL = 0x1802;
const GLenum GL_COLOR_INDEX = 0x1900;
const GLenum GL_STENCIL_INDEX = 0x1901;
const GLenum GL_DEPTH_COMPONENT = 0x1902;
const GLenum GL_RED = 0x1903;
const GLenum GL_GREEN = 0x1904;
const GLenum GL_BLUE = 0x1905;
const GLenum GL_ALPHA = 0x1906;
const GLenum GL_RGB = 0x1907;
const GLenum GL_RGBA = 0x1908;
const GLenum GL_LUMINANCE = 0x1909;
const GLenum GL_LUMINANCE_ALPHA = 0x190A;
const GLenum GL_BITMAP = 0x1A00;
const GLenum GL_POINT = 0x1B00;
const GLenum GL_LINE = 0x1B01;
const GLenum GL_FILL = 0x1B02;
const GLenum GL_RENDER = 0x1C00;
const GLenum GL_FEEDBACK = 0x1C01;
const GLenum GL_SELECT = 0x1C02;
const GLenum GL_FLAT = 0x1D00;
const GLenum GL_SMOOTH = 0x1D01;
const GLenum GL_KEEP = 0x1E00;
const GLenum GL_REPLACE = 0x1E01;
const GLenum GL_INCR = 0x1E02;
const GLenum GL_DECR = 0x1E03;
const GLenum GL_VENDOR = 0x1F00;
const GLenum GL_RENDERER = 0x1F01;
const GLenum GL_VERSION = 0x1F02;
const GLenum GL_EXTENSIONS = 0x1F03;
const GLenum GL_S = 0x2000;
const GLenum GL_T = 0x2001;
const GLenum GL_R = 0x2002;
const GLenum GL_Q = 0x2003;
const GLenum GL_MODULATE = 0x2100;
const GLenum GL_DECAL = 0x2101;
const GLenum GL_TEXTURE_ENV_MODE = 0x2200;
const GLenum GL_TEXTURE_ENV_COLOR = 0x2201;
const GLenum GL_TEXTURE_ENV = 0x2300;
const GLenum GL_EYE_LINEAR = 0x2400;
const GLenum GL_OBJECT_LINEAR = 0x2401;
const GLenum GL_SPHERE_MAP = 0x2402;
const GLenum GL_TEXTURE_GEN_MODE = 0x2500;
const GLenum GL_OBJECT_PLANE = 0x2501;
const GLenum GL_EYE_PLANE = 0x2502;
const GLenum GL_NEAREST = 0x2600;
const GLenum GL_LINEAR = 0x2601;
const GLenum GL_NEAREST_MIPMAP_NEAREST = 0x2700;
const GLenum GL_LINEAR_MIPMAP_NEAREST = 0x2701;
const GLenum GL_NEAREST_MIPMAP_LINEAR = 0x2702;
const GLenum GL_LINEAR_MIPMAP_LINEAR = 0x2703;
const GLenum GL_TEXTURE_MAG_FILTER = 0x2800;
const GLenum GL_TEXTURE_MIN_FILTER = 0x2801;
const GLenum GL_TEXTURE_WRAP_S = 0x2802;
const GLenum GL_TEXTURE_WRAP_T = 0x2803;
const GLenum GL_CLAMP = 0x2900;
const GLenum GL_REPEAT = 0x2901;
const GLenum GL_POLYGON_OFFSET_UNITS = 0x2A00;
const GLenum GL_POLYGON_OFFSET_POINT = 0x2A01;
const GLenum GL_POLYGON_OFFSET_LINE = 0x2A02;
const GLenum GL_R3_G3_B2 = 0x2A10;
const GLenum GL_V2F = 0x2A20;
const GLenum GL_V3F = 0x2A21;
const GLenum GL_C4UB_V2F = 0x2A22;
const GLenum GL_C4UB_V3F = 0x2A23;
const GLenum GL_C3F_V3F = 0x2A24;
const GLenum GL_N3F_V3F = 0x2A25;
const GLenum GL_C4F_N3F_V3F = 0x2A26;
const GLenum GL_T2F_V3F = 0x2A27;
const GLenum GL_T4F_V4F = 0x2A28;
const GLenum GL_T2F_C4UB_V3F = 0x2A29;
const GLenum GL_T2F_C3F_V3F = 0x2A2A;
const GLenum GL_T2F_N3F_V3F = 0x2A2B;
const GLenum GL_T2F_C4F_N3F_V3F = 0x2A2C;
const GLenum GL_T4F_C4F_N3F_V4F = 0x2A2D;
const GLenum GL_CLIP_PLANE0 = 0x3000;
const GLenum GL_CLIP_DISTANCE0 = 0x3000;
const GLenum GL_CLIP_PLANE1 = 0x3001;
const GLenum GL_CLIP_DISTANCE1 = 0x3001;
const GLenum GL_CLIP_PLANE2 = 0x3002;
const GLenum GL_CLIP_DISTANCE2 = 0x3002;
const GLenum GL_CLIP_PLANE3 = 0x3003;
const GLenum GL_CLIP_DISTANCE3 = 0x3003;
const GLenum GL_CLIP_PLANE4 = 0x3004;
const GLenum GL_CLIP_DISTANCE4 = 0x3004;
const GLenum GL_CLIP_PLANE5 = 0x3005;
const GLenum GL_CLIP_DISTANCE5 = 0x3005;
const GLenum GL_CLIP_DISTANCE6 = 0x3006;
const GLenum GL_CLIP_DISTANCE7 = 0x3007;
const GLenum GL_LIGHT0 = 0x4000;
const GLenum GL_LIGHT1 = 0x4001;
const GLenum GL_LIGHT2 = 0x4002;
const GLenum GL_LIGHT3 = 0x4003;
const GLenum GL_LIGHT4 = 0x4004;
const GLenum GL_LIGHT5 = 0x4005;
const GLenum GL_LIGHT6 = 0x4006;
const GLenum GL_LIGHT7 = 0x4007;
const GLenum GL_CONSTANT_COLOR = 0x8001;
const GLenum GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
const GLenum GL_CONSTANT_ALPHA = 0x8003;
const GLenum GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
const GLenum GL_FUNC_ADD = 0x8006;
const GLenum GL_MIN = 0x8007;
const GLenum GL_MAX = 0x8008;
const GLenum GL_BLEND_EQUATION_RGB = 0x8009;
const GLenum GL_FUNC_SUBTRACT = 0x800A;
const GLenum GL_FUNC_REVERSE_SUBTRACT = 0x800B;
const GLenum GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
const GLenum GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
const GLenum GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
const GLenum GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
const GLenum GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
const GLenum GL_POLYGON_OFFSET_FILL = 0x8037;
const GLenum GL_POLYGON_OFFSET_FACTOR = 0x8038;
const GLenum GL_RESCALE_NORMAL = 0x803A;
const GLenum GL_ALPHA4 = 0x803B;
const GLenum GL_ALPHA8 = 0x803C;
const GLenum GL_ALPHA12 = 0x803D;
const GLenum GL_ALPHA16 = 0x803E;
const GLenum GL_LUMINANCE4 = 0x803F;
const GLenum GL_LUMINANCE8 = 0x8040;
const GLenum GL_LUMINANCE12 = 0x8041;
const GLenum GL_LUMINANCE16 = 0x8042;
const GLenum GL_LUMINANCE4_ALPHA4 = 0x8043;
const GLenum GL_LUMINANCE6_ALPHA2 = 0x8044;
const GLenum GL_LUMINANCE8_ALPHA8 = 0x8045;
const GLenum GL_LUMINANCE12_ALPHA4 = 0x8046;
const GLenum GL_LUMINANCE12_ALPHA12 = 0x8047;
const GLenum GL_LUMINANCE16_ALPHA16 = 0x8048;
const GLenum GL_INTENSITY = 0x8049;
const GLenum GL_INTENSITY4 = 0x804A;
const GLenum GL_INTENSITY8 = 0x804B;
const GLenum GL_INTENSITY12 = 0x804C;
const GLenum GL_INTENSITY16 = 0x804D;
const GLenum GL_RGB4 = 0x804F;
const GLenum GL_RGB5 = 0x8050;
const GLenum GL_RGB8 = 0x8051;
const GLenum GL_RGB10 = 0x8052;
const GLenum GL_RGB12 = 0x8053;
const GLenum GL_RGB16 = 0x8054;
const GLenum GL_RGBA2 = 0x8055;
const GLenum GL_RGBA4 = 0x8056;
const GLenum GL_RGB5_A1 = 0x8057;
const GLenum GL_RGBA8 = 0x8058;
const GLenum GL_RGB10_A2 = 0x8059;
const GLenum GL_RGBA12 = 0x805A;
const GLenum GL_RGBA16 = 0x805B;
const GLenum GL_TEXTURE_RED_SIZE = 0x805C;
const GLenum GL_TEXTURE_GREEN_SIZE = 0x805D;
const GLenum GL_TEXTURE_BLUE_SIZE = 0x805E;
const GLenum GL_TEXTURE_ALPHA_SIZE = 0x805F;
const GLenum GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
const GLenum GL_TEXTURE_INTENSITY_SIZE = 0x8061;
const GLenum GL_PROXY_TEXTURE_1D = 0x8063;
const GLenum GL_PROXY_TEXTURE_2D = 0x8064;
const GLenum GL_TEXTURE_PRIORITY = 0x8066;
const GLenum GL_TEXTURE_RESIDENT = 0x8067;
const GLenum GL_TEXTURE_BINDING_1D = 0x8068;
const GLenum GL_TEXTURE_BINDING_2D = 0x8069;
const GLenum GL_TEXTURE_BINDING_3D = 0x806A;
const GLenum GL_PACK_SKIP_IMAGES = 0x806B;
const GLenum GL_PACK_IMAGE_HEIGHT = 0x806C;
const GLenum GL_UNPACK_SKIP_IMAGES = 0x806D;
const GLenum GL_UNPACK_IMAGE_HEIGHT = 0x806E;
const GLenum GL_TEXTURE_3D = 0x806F;
const GLenum GL_PROXY_TEXTURE_3D = 0x8070;
const GLenum GL_TEXTURE_DEPTH = 0x8071;
const GLenum GL_TEXTURE_WRAP_R = 0x8072;
const GLenum GL_MAX_3D_TEXTURE_SIZE = 0x8073;
const GLenum GL_VERTEX_ARRAY = 0x8074;
const GLenum GL_NORMAL_ARRAY = 0x8075;
const GLenum GL_COLOR_ARRAY = 0x8076;
const GLenum GL_INDEX_ARRAY = 0x8077;
const GLenum GL_TEXTURE_COORD_ARRAY = 0x8078;
const GLenum GL_EDGE_FLAG_ARRAY = 0x8079;
const GLenum GL_VERTEX_ARRAY_SIZE = 0x807A;
const GLenum GL_VERTEX_ARRAY_TYPE = 0x807B;
const GLenum GL_VERTEX_ARRAY_STRIDE = 0x807C;
const GLenum GL_NORMAL_ARRAY_TYPE = 0x807E;
const GLenum GL_NORMAL_ARRAY_STRIDE = 0x807F;
const GLenum GL_COLOR_ARRAY_SIZE = 0x8081;
const GLenum GL_COLOR_ARRAY_TYPE = 0x8082;
const GLenum GL_COLOR_ARRAY_STRIDE = 0x8083;
const GLenum GL_INDEX_ARRAY_TYPE = 0x8085;
const GLenum GL_INDEX_ARRAY_STRIDE = 0x8086;
const GLenum GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
const GLenum GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
const GLenum GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
const GLenum GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
const GLenum GL_VERTEX_ARRAY_POINTER = 0x808E;
const GLenum GL_NORMAL_ARRAY_POINTER = 0x808F;
const GLenum GL_COLOR_ARRAY_POINTER = 0x8090;
const GLenum GL_INDEX_ARRAY_POINTER = 0x8091;
const GLenum GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
const GLenum GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
const GLenum GL_MULTISAMPLE = 0x809D;
const GLenum GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
const GLenum GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
const GLenum GL_SAMPLE_COVERAGE = 0x80A0;
const GLenum GL_SAMPLE_BUFFERS = 0x80A8;
const GLenum GL_SAMPLES = 0x80A9;
const GLenum GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
const GLenum GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
const GLenum GL_BLEND_DST_RGB = 0x80C8;
const GLenum GL_BLEND_SRC_RGB = 0x80C9;
const GLenum GL_BLEND_DST_ALPHA = 0x80CA;
const GLenum GL_BLEND_SRC_ALPHA = 0x80CB;
const GLenum GL_BGR = 0x80E0;
const GLenum GL_BGRA = 0x80E1;
const GLenum GL_MAX_ELEMENTS_VERTICES = 0x80E8;
const GLenum GL_MAX_ELEMENTS_INDICES = 0x80E9;
const GLenum GL_POINT_SIZE_MIN = 0x8126;
const GLenum GL_POINT_SIZE_MAX = 0x8127;
const GLenum GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
const GLenum GL_POINT_DISTANCE_ATTENUATION = 0x8129;
const GLenum GL_CLAMP_TO_BORDER = 0x812D;
const GLenum GL_CLAMP_TO_EDGE = 0x812F;
const GLenum GL_TEXTURE_MIN_LOD = 0x813A;
const GLenum GL_TEXTURE_MAX_LOD = 0x813B;
const GLenum GL_TEXTURE_BASE_LEVEL = 0x813C;
const GLenum GL_TEXTURE_MAX_LEVEL = 0x813D;
const GLenum GL_GENERATE_MIPMAP = 0x8191;
const GLenum GL_GENERATE_MIPMAP_HINT = 0x8192;
const GLenum GL_DEPTH_COMPONENT16 = 0x81A5;
const GLenum GL_DEPTH_COMPONENT24 = 0x81A6;
const GLenum GL_DEPTH_COMPONENT32 = 0x81A7;
const GLenum GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
const GLenum GL_SINGLE_COLOR = 0x81F9;
const GLenum GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
const GLenum GL_FRAMEBUFFER_DEFAULT = 0x8218;
const GLenum GL_FRAMEBUFFER_UNDEFINED = 0x8219;
const GLenum GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
const GLenum GL_MAJOR_VERSION = 0x821B;
const GLenum GL_MINOR_VERSION = 0x821C;
const GLenum GL_NUM_EXTENSIONS = 0x821D;
const GLenum GL_CONTEXT_FLAGS = 0x821E;
const GLenum GL_BUFFER_IMMUTABLE_STORAGE = 0x821F;
const GLenum GL_BUFFER_STORAGE_FLAGS = 0x8220;
const GLenum GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
const GLenum GL_COMPRESSED_RED = 0x8225;
const GLenum GL_COMPRESSED_RG = 0x8226;
const GLenum GL_RG = 0x8227;
const GLenum GL_RG_INTEGER = 0x8228;
const GLenum GL_R8 = 0x8229;
const GLenum GL_R16 = 0x822A;
const GLenum GL_RG8 = 0x822B;
const GLenum GL_RG16 = 0x822C;
const GLenum GL_R16F = 0x822D;
const GLenum GL_R32F = 0x822E;
const GLenum GL_RG16F = 0x822F;
const GLenum GL_RG32F = 0x8230;
const GLenum GL_R8I = 0x8231;
const GLenum GL_R8UI = 0x8232;
const GLenum GL_R16I = 0x8233;
const GLenum GL_R16UI = 0x8234;
const GLenum GL_R32I = 0x8235;
const GLenum GL_R32UI = 0x8236;
const GLenum GL_RG8I = 0x8237;
const GLenum GL_RG8UI = 0x8238;
const GLenum GL_RG16I = 0x8239;
const GLenum GL_RG16UI = 0x823A;
const GLenum GL_RG32I = 0x823B;
const GLenum GL_RG32UI = 0x823C;
const GLenum GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
const GLenum GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
const GLenum GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
const GLenum GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
const GLenum GL_DEBUG_SOURCE_API = 0x8246;
const GLenum GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
const GLenum GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
const GLenum GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
const GLenum GL_DEBUG_SOURCE_APPLICATION = 0x824A;
const GLenum GL_DEBUG_SOURCE_OTHER = 0x824B;
const GLenum GL_DEBUG_TYPE_ERROR = 0x824C;
const GLenum GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
const GLenum GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
const GLenum GL_DEBUG_TYPE_PORTABILITY = 0x824F;
const GLenum GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
const GLenum GL_DEBUG_TYPE_OTHER = 0x8251;
const GLenum GL_LOSE_CONTEXT_ON_RESET = 0x8252;
const GLenum GL_GUILTY_CONTEXT_RESET = 0x8253;
const GLenum GL_INNOCENT_CONTEXT_RESET = 0x8254;
const GLenum GL_UNKNOWN_CONTEXT_RESET = 0x8255;
const GLenum GL_RESET_NOTIFICATION_STRATEGY = 0x8256;
const GLenum GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
const GLenum GL_PROGRAM_SEPARABLE = 0x8258;
const GLenum GL_ACTIVE_PROGRAM = 0x8259;
const GLenum GL_PROGRAM_PIPELINE_BINDING = 0x825A;
const GLenum GL_MAX_VIEWPORTS = 0x825B;
const GLenum GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
const GLenum GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
const GLenum GL_LAYER_PROVOKING_VERTEX = 0x825E;
const GLenum GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
const GLenum GL_UNDEFINED_VERTEX = 0x8260;
const GLenum GL_NO_RESET_NOTIFICATION = 0x8261;
const GLenum GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
const GLenum GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
const GLenum GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
const GLenum GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
const GLenum GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
const GLenum GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
const GLenum GL_DEBUG_TYPE_MARKER = 0x8268;
const GLenum GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
const GLenum GL_DEBUG_TYPE_POP_GROUP = 0x826A;
const GLenum GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
const GLenum GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
const GLenum GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
const GLenum GL_MAX_UNIFORM_LOCATIONS = 0x826E;
const GLenum GL_INTERNALFORMAT_SUPPORTED = 0x826F;
const GLenum GL_INTERNALFORMAT_PREFERRED = 0x8270;
const GLenum GL_INTERNALFORMAT_RED_SIZE = 0x8271;
const GLenum GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
const GLenum GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
const GLenum GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
const GLenum GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
const GLenum GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
const GLenum GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
const GLenum GL_INTERNALFORMAT_RED_TYPE = 0x8278;
const GLenum GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
const GLenum GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
const GLenum GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
const GLenum GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
const GLenum GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
const GLenum GL_MAX_WIDTH = 0x827E;
const GLenum GL_MAX_HEIGHT = 0x827F;
const GLenum GL_MAX_DEPTH = 0x8280;
const GLenum GL_MAX_LAYERS = 0x8281;
const GLenum GL_MAX_COMBINED_DIMENSIONS = 0x8282;
const GLenum GL_COLOR_COMPONENTS = 0x8283;
const GLenum GL_DEPTH_COMPONENTS = 0x8284;
const GLenum GL_STENCIL_COMPONENTS = 0x8285;
const GLenum GL_COLOR_RENDERABLE = 0x8286;
const GLenum GL_DEPTH_RENDERABLE = 0x8287;
const GLenum GL_STENCIL_RENDERABLE = 0x8288;
const GLenum GL_FRAMEBUFFER_RENDERABLE = 0x8289;
const GLenum GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
const GLenum GL_FRAMEBUFFER_BLEND = 0x828B;
const GLenum GL_READ_PIXELS = 0x828C;
const GLenum GL_READ_PIXELS_FORMAT = 0x828D;
const GLenum GL_READ_PIXELS_TYPE = 0x828E;
const GLenum GL_TEXTURE_IMAGE_FORMAT = 0x828F;
const GLenum GL_TEXTURE_IMAGE_TYPE = 0x8290;
const GLenum GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
const GLenum GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
const GLenum GL_MIPMAP = 0x8293;
const GLenum GL_MANUAL_GENERATE_MIPMAP = 0x8294;
const GLenum GL_AUTO_GENERATE_MIPMAP = 0x8295;
const GLenum GL_COLOR_ENCODING = 0x8296;
const GLenum GL_SRGB_READ = 0x8297;
const GLenum GL_SRGB_WRITE = 0x8298;
const GLenum GL_FILTER = 0x829A;
const GLenum GL_VERTEX_TEXTURE = 0x829B;
const GLenum GL_TESS_CONTROL_TEXTURE = 0x829C;
const GLenum GL_TESS_EVALUATION_TEXTURE = 0x829D;
const GLenum GL_GEOMETRY_TEXTURE = 0x829E;
const GLenum GL_FRAGMENT_TEXTURE = 0x829F;
const GLenum GL_COMPUTE_TEXTURE = 0x82A0;
const GLenum GL_TEXTURE_SHADOW = 0x82A1;
const GLenum GL_TEXTURE_GATHER = 0x82A2;
const GLenum GL_TEXTURE_GATHER_SHADOW = 0x82A3;
const GLenum GL_SHADER_IMAGE_LOAD = 0x82A4;
const GLenum GL_SHADER_IMAGE_STORE = 0x82A5;
const GLenum GL_SHADER_IMAGE_ATOMIC = 0x82A6;
const GLenum GL_IMAGE_TEXEL_SIZE = 0x82A7;
const GLenum GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
const GLenum GL_IMAGE_PIXEL_FORMAT = 0x82A9;
const GLenum GL_IMAGE_PIXEL_TYPE = 0x82AA;
const GLenum GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
const GLenum GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
const GLenum GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
const GLenum GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
const GLenum GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
const GLenum GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
const GLenum GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
const GLenum GL_CLEAR_BUFFER = 0x82B4;
const GLenum GL_TEXTURE_VIEW = 0x82B5;
const GLenum GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
const GLenum GL_FULL_SUPPORT = 0x82B7;
const GLenum GL_CAVEAT_SUPPORT = 0x82B8;
const GLenum GL_IMAGE_CLASS_4_X_32 = 0x82B9;
const GLenum GL_IMAGE_CLASS_2_X_32 = 0x82BA;
const GLenum GL_IMAGE_CLASS_1_X_32 = 0x82BB;
const GLenum GL_IMAGE_CLASS_4_X_16 = 0x82BC;
const GLenum GL_IMAGE_CLASS_2_X_16 = 0x82BD;
const GLenum GL_IMAGE_CLASS_1_X_16 = 0x82BE;
const GLenum GL_IMAGE_CLASS_4_X_8 = 0x82BF;
const GLenum GL_IMAGE_CLASS_2_X_8 = 0x82C0;
const GLenum GL_IMAGE_CLASS_1_X_8 = 0x82C1;
const GLenum GL_IMAGE_CLASS_11_11_10 = 0x82C2;
const GLenum GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
const GLenum GL_VIEW_CLASS_128_BITS = 0x82C4;
const GLenum GL_VIEW_CLASS_96_BITS = 0x82C5;
const GLenum GL_VIEW_CLASS_64_BITS = 0x82C6;
const GLenum GL_VIEW_CLASS_48_BITS = 0x82C7;
const GLenum GL_VIEW_CLASS_32_BITS = 0x82C8;
const GLenum GL_VIEW_CLASS_24_BITS = 0x82C9;
const GLenum GL_VIEW_CLASS_16_BITS = 0x82CA;
const GLenum GL_VIEW_CLASS_8_BITS = 0x82CB;
const GLenum GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
const GLenum GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
const GLenum GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
const GLenum GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
const GLenum GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
const GLenum GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
const GLenum GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
const GLenum GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
const GLenum GL_VERTEX_ATTRIB_BINDING = 0x82D4;
const GLenum GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
const GLenum GL_VERTEX_BINDING_DIVISOR = 0x82D6;
const GLenum GL_VERTEX_BINDING_OFFSET = 0x82D7;
const GLenum GL_VERTEX_BINDING_STRIDE = 0x82D8;
const GLenum GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
const GLenum GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
const GLenum GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
const GLenum GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
const GLenum GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
const GLenum GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
const GLenum GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
const GLenum GL_BUFFER = 0x82E0;
const GLenum GL_SHADER = 0x82E1;
const GLenum GL_PROGRAM = 0x82E2;
const GLenum GL_QUERY = 0x82E3;
const GLenum GL_PROGRAM_PIPELINE = 0x82E4;
const GLenum GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
const GLenum GL_SAMPLER = 0x82E6;
const GLenum GL_MAX_LABEL_LENGTH = 0x82E8;
const GLenum GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
const GLenum GL_QUERY_TARGET = 0x82EA;
const GLenum GL_TEXTURE_BINDING = 0x82EB;
const GLenum GL_MAX_CULL_DISTANCES = 0x82F9;
const GLenum GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA;
const GLenum GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB;
const GLenum GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC;
const GLenum GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
const GLenum GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
const GLenum GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
const GLenum GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
const GLenum GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
const GLenum GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
const GLenum GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
const GLenum GL_MIRRORED_REPEAT = 0x8370;
const GLenum GL_FOG_COORDINATE_SOURCE = 0x8450;
const GLenum GL_FOG_COORD_SRC = 0x8450;
const GLenum GL_FOG_COORDINATE = 0x8451;
const GLenum GL_FOG_COORD = 0x8451;
const GLenum GL_FRAGMENT_DEPTH = 0x8452;
const GLenum GL_CURRENT_FOG_COORDINATE = 0x8453;
const GLenum GL_CURRENT_FOG_COORD = 0x8453;
const GLenum GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
const GLenum GL_FOG_COORD_ARRAY_TYPE = 0x8454;
const GLenum GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
const GLenum GL_FOG_COORD_ARRAY_STRIDE = 0x8455;
const GLenum GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
const GLenum GL_FOG_COORD_ARRAY_POINTER = 0x8456;
const GLenum GL_FOG_COORDINATE_ARRAY = 0x8457;
const GLenum GL_FOG_COORD_ARRAY = 0x8457;
const GLenum GL_COLOR_SUM = 0x8458;
const GLenum GL_CURRENT_SECONDARY_COLOR = 0x8459;
const GLenum GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
const GLenum GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
const GLenum GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
const GLenum GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
const GLenum GL_SECONDARY_COLOR_ARRAY = 0x845E;
const GLenum GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
const GLenum GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
const GLenum GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
const GLenum GL_TEXTURE0 = 0x84C0;
const GLenum GL_TEXTURE1 = 0x84C1;
const GLenum GL_TEXTURE2 = 0x84C2;
const GLenum GL_TEXTURE3 = 0x84C3;
const GLenum GL_TEXTURE4 = 0x84C4;
const GLenum GL_TEXTURE5 = 0x84C5;
const GLenum GL_TEXTURE6 = 0x84C6;
const GLenum GL_TEXTURE7 = 0x84C7;
const GLenum GL_TEXTURE8 = 0x84C8;
const GLenum GL_TEXTURE9 = 0x84C9;
const GLenum GL_TEXTURE10 = 0x84CA;
const GLenum GL_TEXTURE11 = 0x84CB;
const GLenum GL_TEXTURE12 = 0x84CC;
const GLenum GL_TEXTURE13 = 0x84CD;
const GLenum GL_TEXTURE14 = 0x84CE;
const GLenum GL_TEXTURE15 = 0x84CF;
const GLenum GL_TEXTURE16 = 0x84D0;
const GLenum GL_TEXTURE17 = 0x84D1;
const GLenum GL_TEXTURE18 = 0x84D2;
const GLenum GL_TEXTURE19 = 0x84D3;
const GLenum GL_TEXTURE20 = 0x84D4;
const GLenum GL_TEXTURE21 = 0x84D5;
const GLenum GL_TEXTURE22 = 0x84D6;
const GLenum GL_TEXTURE23 = 0x84D7;
const GLenum GL_TEXTURE24 = 0x84D8;
const GLenum GL_TEXTURE25 = 0x84D9;
const GLenum GL_TEXTURE26 = 0x84DA;
const GLenum GL_TEXTURE27 = 0x84DB;
const GLenum GL_TEXTURE28 = 0x84DC;
const GLenum GL_TEXTURE29 = 0x84DD;
const GLenum GL_TEXTURE30 = 0x84DE;
const GLenum GL_TEXTURE31 = 0x84DF;
const GLenum GL_ACTIVE_TEXTURE = 0x84E0;
const GLenum GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
const GLenum GL_MAX_TEXTURE_UNITS = 0x84E2;
const GLenum GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
const GLenum GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
const GLenum GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
const GLenum GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
const GLenum GL_SUBTRACT = 0x84E7;
const GLenum GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
const GLenum GL_COMPRESSED_ALPHA = 0x84E9;
const GLenum GL_COMPRESSED_LUMINANCE = 0x84EA;
const GLenum GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
const GLenum GL_COMPRESSED_INTENSITY = 0x84EC;
const GLenum GL_COMPRESSED_RGB = 0x84ED;
const GLenum GL_COMPRESSED_RGBA = 0x84EE;
const GLenum GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
const GLenum GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
const GLenum GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
const GLenum GL_TEXTURE_RECTANGLE = 0x84F5;
const GLenum GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
const GLenum GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
const GLenum GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
const GLenum GL_DEPTH_STENCIL = 0x84F9;
const GLenum GL_UNSIGNED_INT_24_8 = 0x84FA;
const GLenum GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
const GLenum GL_TEXTURE_FILTER_CONTROL = 0x8500;
const GLenum GL_TEXTURE_LOD_BIAS = 0x8501;
const GLenum GL_INCR_WRAP = 0x8507;
const GLenum GL_DECR_WRAP = 0x8508;
const GLenum GL_NORMAL_MAP = 0x8511;
const GLenum GL_REFLECTION_MAP = 0x8512;
const GLenum GL_TEXTURE_CUBE_MAP = 0x8513;
const GLenum GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
const GLenum GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
const GLenum GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
const GLenum GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
const GLenum GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
const GLenum GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
const GLenum GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
const GLenum GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
const GLenum GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
const GLenum GL_COMBINE = 0x8570;
const GLenum GL_COMBINE_RGB = 0x8571;
const GLenum GL_COMBINE_ALPHA = 0x8572;
const GLenum GL_RGB_SCALE = 0x8573;
const GLenum GL_ADD_SIGNED = 0x8574;
const GLenum GL_INTERPOLATE = 0x8575;
const GLenum GL_CONSTANT = 0x8576;
const GLenum GL_PRIMARY_COLOR = 0x8577;
const GLenum GL_PREVIOUS = 0x8578;
const GLenum GL_SOURCE0_RGB = 0x8580;
const GLenum GL_SRC0_RGB = 0x8580;
const GLenum GL_SOURCE1_RGB = 0x8581;
const GLenum GL_SRC1_RGB = 0x8581;
const GLenum GL_SOURCE2_RGB = 0x8582;
const GLenum GL_SRC2_RGB = 0x8582;
const GLenum GL_SOURCE0_ALPHA = 0x8588;
const GLenum GL_SRC0_ALPHA = 0x8588;
const GLenum GL_SOURCE1_ALPHA = 0x8589;
const GLenum GL_SRC1_ALPHA = 0x8589;
const GLenum GL_SOURCE2_ALPHA = 0x858A;
const GLenum GL_SRC2_ALPHA = 0x858A;
const GLenum GL_OPERAND0_RGB = 0x8590;
const GLenum GL_OPERAND1_RGB = 0x8591;
const GLenum GL_OPERAND2_RGB = 0x8592;
const GLenum GL_OPERAND0_ALPHA = 0x8598;
const GLenum GL_OPERAND1_ALPHA = 0x8599;
const GLenum GL_OPERAND2_ALPHA = 0x859A;
const GLenum GL_VERTEX_ARRAY_BINDING = 0x85B5;
const GLenum GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
const GLenum GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
const GLenum GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
const GLenum GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
const GLenum GL_CURRENT_VERTEX_ATTRIB = 0x8626;
const GLenum GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
const GLenum GL_PROGRAM_POINT_SIZE = 0x8642;
const GLenum GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
const GLenum GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
const GLenum GL_DEPTH_CLAMP = 0x864F;
const GLenum GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
const GLenum GL_TEXTURE_COMPRESSED = 0x86A1;
const GLenum GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
const GLenum GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
const GLenum GL_DOT3_RGB = 0x86AE;
const GLenum GL_DOT3_RGBA = 0x86AF;
const GLenum GL_PROGRAM_BINARY_LENGTH = 0x8741;
const GLenum GL_MIRROR_CLAMP_TO_EDGE = 0x8743;
const GLenum GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
const GLenum GL_BUFFER_SIZE = 0x8764;
const GLenum GL_BUFFER_USAGE = 0x8765;
const GLenum GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
const GLenum GL_PROGRAM_BINARY_FORMATS = 0x87FF;
const GLenum GL_STENCIL_BACK_FUNC = 0x8800;
const GLenum GL_STENCIL_BACK_FAIL = 0x8801;
const GLenum GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
const GLenum GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
const GLenum GL_RGBA32F = 0x8814;
const GLenum GL_RGB32F = 0x8815;
const GLenum GL_RGBA16F = 0x881A;
const GLenum GL_RGB16F = 0x881B;
const GLenum GL_MAX_DRAW_BUFFERS = 0x8824;
const GLenum GL_DRAW_BUFFER0 = 0x8825;
const GLenum GL_DRAW_BUFFER1 = 0x8826;
const GLenum GL_DRAW_BUFFER2 = 0x8827;
const GLenum GL_DRAW_BUFFER3 = 0x8828;
const GLenum GL_DRAW_BUFFER4 = 0x8829;
const GLenum GL_DRAW_BUFFER5 = 0x882A;
const GLenum GL_DRAW_BUFFER6 = 0x882B;
const GLenum GL_DRAW_BUFFER7 = 0x882C;
const GLenum GL_DRAW_BUFFER8 = 0x882D;
const GLenum GL_DRAW_BUFFER9 = 0x882E;
const GLenum GL_DRAW_BUFFER10 = 0x882F;
const GLenum GL_DRAW_BUFFER11 = 0x8830;
const GLenum GL_DRAW_BUFFER12 = 0x8831;
const GLenum GL_DRAW_BUFFER13 = 0x8832;
const GLenum GL_DRAW_BUFFER14 = 0x8833;
const GLenum GL_DRAW_BUFFER15 = 0x8834;
const GLenum GL_BLEND_EQUATION_ALPHA = 0x883D;
const GLenum GL_TEXTURE_DEPTH_SIZE = 0x884A;
const GLenum GL_DEPTH_TEXTURE_MODE = 0x884B;
const GLenum GL_TEXTURE_COMPARE_MODE = 0x884C;
const GLenum GL_TEXTURE_COMPARE_FUNC = 0x884D;
const GLenum GL_COMPARE_R_TO_TEXTURE = 0x884E;
const GLenum GL_COMPARE_REF_TO_TEXTURE = 0x884E;
const GLenum GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
const GLenum GL_POINT_SPRITE = 0x8861;
const GLenum GL_COORD_REPLACE = 0x8862;
const GLenum GL_QUERY_COUNTER_BITS = 0x8864;
const GLenum GL_CURRENT_QUERY = 0x8865;
const GLenum GL_QUERY_RESULT = 0x8866;
const GLenum GL_QUERY_RESULT_AVAILABLE = 0x8867;
const GLenum GL_MAX_VERTEX_ATTRIBS = 0x8869;
const GLenum GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
const GLenum GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
const GLenum GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
const GLenum GL_MAX_TEXTURE_COORDS = 0x8871;
const GLenum GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
const GLenum GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
const GLenum GL_ARRAY_BUFFER = 0x8892;
const GLenum GL_ELEMENT_ARRAY_BUFFER = 0x8893;
const GLenum GL_ARRAY_BUFFER_BINDING = 0x8894;
const GLenum GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
const GLenum GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
const GLenum GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
const GLenum GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
const GLenum GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
const GLenum GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
const GLenum GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
const GLenum GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
const GLenum GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
const GLenum GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
const GLenum GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
const GLenum GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
const GLenum GL_READ_ONLY = 0x88B8;
const GLenum GL_WRITE_ONLY = 0x88B9;
const GLenum GL_READ_WRITE = 0x88BA;
const GLenum GL_BUFFER_ACCESS = 0x88BB;
const GLenum GL_BUFFER_MAPPED = 0x88BC;
const GLenum GL_BUFFER_MAP_POINTER = 0x88BD;
const GLenum GL_TIME_ELAPSED = 0x88BF;
const GLenum GL_STREAM_DRAW = 0x88E0;
const GLenum GL_STREAM_READ = 0x88E1;
const GLenum GL_STREAM_COPY = 0x88E2;
const GLenum GL_STATIC_DRAW = 0x88E4;
const GLenum GL_STATIC_READ = 0x88E5;
const GLenum GL_STATIC_COPY = 0x88E6;
const GLenum GL_DYNAMIC_DRAW = 0x88E8;
const GLenum GL_DYNAMIC_READ = 0x88E9;
const GLenum GL_DYNAMIC_COPY = 0x88EA;
const GLenum GL_PIXEL_PACK_BUFFER = 0x88EB;
const GLenum GL_PIXEL_UNPACK_BUFFER = 0x88EC;
const GLenum GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
const GLenum GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
const GLenum GL_DEPTH24_STENCIL8 = 0x88F0;
const GLenum GL_TEXTURE_STENCIL_SIZE = 0x88F1;
const GLenum GL_SRC1_COLOR = 0x88F9;
const GLenum GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
const GLenum GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
const GLenum GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
const GLenum GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
const GLenum GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
const GLenum GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
const GLenum GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
const GLenum GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
const GLenum GL_SAMPLES_PASSED = 0x8914;
const GLenum GL_GEOMETRY_VERTICES_OUT = 0x8916;
const GLenum GL_GEOMETRY_INPUT_TYPE = 0x8917;
const GLenum GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
const GLenum GL_SAMPLER_BINDING = 0x8919;
const GLenum GL_CLAMP_VERTEX_COLOR = 0x891A;
const GLenum GL_CLAMP_FRAGMENT_COLOR = 0x891B;
const GLenum GL_CLAMP_READ_COLOR = 0x891C;
const GLenum GL_FIXED_ONLY = 0x891D;
const GLenum GL_UNIFORM_BUFFER = 0x8A11;
const GLenum GL_UNIFORM_BUFFER_BINDING = 0x8A28;
const GLenum GL_UNIFORM_BUFFER_START = 0x8A29;
const GLenum GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
const GLenum GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
const GLenum GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
const GLenum GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
const GLenum GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
const GLenum GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
const GLenum GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
const GLenum GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
const GLenum GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
const GLenum GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
const GLenum GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
const GLenum GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
const GLenum GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
const GLenum GL_UNIFORM_TYPE = 0x8A37;
const GLenum GL_UNIFORM_SIZE = 0x8A38;
const GLenum GL_UNIFORM_NAME_LENGTH = 0x8A39;
const GLenum GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
const GLenum GL_UNIFORM_OFFSET = 0x8A3B;
const GLenum GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
const GLenum GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
const GLenum GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
const GLenum GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
const GLenum GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
const GLenum GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
const GLenum GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
const GLenum GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
const GLenum GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
const GLenum GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
const GLenum GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
const GLenum GL_FRAGMENT_SHADER = 0x8B30;
const GLenum GL_VERTEX_SHADER = 0x8B31;
const GLenum GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
const GLenum GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
const GLenum GL_MAX_VARYING_FLOATS = 0x8B4B;
const GLenum GL_MAX_VARYING_COMPONENTS = 0x8B4B;
const GLenum GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
const GLenum GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
const GLenum GL_SHADER_TYPE = 0x8B4F;
const GLenum GL_FLOAT_VEC2 = 0x8B50;
const GLenum GL_FLOAT_VEC3 = 0x8B51;
const GLenum GL_FLOAT_VEC4 = 0x8B52;
const GLenum GL_INT_VEC2 = 0x8B53;
const GLenum GL_INT_VEC3 = 0x8B54;
const GLenum GL_INT_VEC4 = 0x8B55;
const GLenum GL_BOOL = 0x8B56;
const GLenum GL_BOOL_VEC2 = 0x8B57;
const GLenum GL_BOOL_VEC3 = 0x8B58;
const GLenum GL_BOOL_VEC4 = 0x8B59;
const GLenum GL_FLOAT_MAT2 = 0x8B5A;
const GLenum GL_FLOAT_MAT3 = 0x8B5B;
const GLenum GL_FLOAT_MAT4 = 0x8B5C;
const GLenum GL_SAMPLER_1D = 0x8B5D;
const GLenum GL_SAMPLER_2D = 0x8B5E;
const GLenum GL_SAMPLER_3D = 0x8B5F;
const GLenum GL_SAMPLER_CUBE = 0x8B60;
const GLenum GL_SAMPLER_1D_SHADOW = 0x8B61;
const GLenum GL_SAMPLER_2D_SHADOW = 0x8B62;
const GLenum GL_SAMPLER_2D_RECT = 0x8B63;
const GLenum GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
const GLenum GL_FLOAT_MAT2x3 = 0x8B65;
const GLenum GL_FLOAT_MAT2x4 = 0x8B66;
const GLenum GL_FLOAT_MAT3x2 = 0x8B67;
const GLenum GL_FLOAT_MAT3x4 = 0x8B68;
const GLenum GL_FLOAT_MAT4x2 = 0x8B69;
const GLenum GL_FLOAT_MAT4x3 = 0x8B6A;
const GLenum GL_DELETE_STATUS = 0x8B80;
const GLenum GL_COMPILE_STATUS = 0x8B81;
const GLenum GL_LINK_STATUS = 0x8B82;
const GLenum GL_VALIDATE_STATUS = 0x8B83;
const GLenum GL_INFO_LOG_LENGTH = 0x8B84;
const GLenum GL_ATTACHED_SHADERS = 0x8B85;
const GLenum GL_ACTIVE_UNIFORMS = 0x8B86;
const GLenum GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
const GLenum GL_SHADER_SOURCE_LENGTH = 0x8B88;
const GLenum GL_ACTIVE_ATTRIBUTES = 0x8B89;
const GLenum GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
const GLenum GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
const GLenum GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
const GLenum GL_CURRENT_PROGRAM = 0x8B8D;
const GLenum GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
const GLenum GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
const GLenum GL_TEXTURE_RED_TYPE = 0x8C10;
const GLenum GL_TEXTURE_GREEN_TYPE = 0x8C11;
const GLenum GL_TEXTURE_BLUE_TYPE = 0x8C12;
const GLenum GL_TEXTURE_ALPHA_TYPE = 0x8C13;
const GLenum GL_TEXTURE_DEPTH_TYPE = 0x8C16;
const GLenum GL_UNSIGNED_NORMALIZED = 0x8C17;
const GLenum GL_TEXTURE_1D_ARRAY = 0x8C18;
const GLenum GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
const GLenum GL_TEXTURE_2D_ARRAY = 0x8C1A;
const GLenum GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
const GLenum GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
const GLenum GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
const GLenum GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
const GLenum GL_TEXTURE_BUFFER = 0x8C2A;
const GLenum GL_TEXTURE_BUFFER_BINDING = 0x8C2A;
const GLenum GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
const GLenum GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
const GLenum GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
const GLenum GL_ANY_SAMPLES_PASSED = 0x8C2F;
const GLenum GL_SAMPLE_SHADING = 0x8C36;
const GLenum GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
const GLenum GL_R11F_G11F_B10F = 0x8C3A;
const GLenum GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
const GLenum GL_RGB9_E5 = 0x8C3D;
const GLenum GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
const GLenum GL_TEXTURE_SHARED_SIZE = 0x8C3F;
const GLenum GL_SRGB = 0x8C40;
const GLenum GL_SRGB8 = 0x8C41;
const GLenum GL_SRGB_ALPHA = 0x8C42;
const GLenum GL_SRGB8_ALPHA8 = 0x8C43;
const GLenum GL_SLUMINANCE_ALPHA = 0x8C44;
const GLenum GL_SLUMINANCE8_ALPHA8 = 0x8C45;
const GLenum GL_SLUMINANCE = 0x8C46;
const GLenum GL_SLUMINANCE8 = 0x8C47;
const GLenum GL_COMPRESSED_SRGB = 0x8C48;
const GLenum GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
const GLenum GL_COMPRESSED_SLUMINANCE = 0x8C4A;
const GLenum GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
const GLenum GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
const GLenum GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
const GLenum GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
const GLenum GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
const GLenum GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
const GLenum GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
const GLenum GL_PRIMITIVES_GENERATED = 0x8C87;
const GLenum GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
const GLenum GL_RASTERIZER_DISCARD = 0x8C89;
const GLenum GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
const GLenum GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
const GLenum GL_INTERLEAVED_ATTRIBS = 0x8C8C;
const GLenum GL_SEPARATE_ATTRIBS = 0x8C8D;
const GLenum GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
const GLenum GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
const GLenum GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
const GLenum GL_LOWER_LEFT = 0x8CA1;
const GLenum GL_UPPER_LEFT = 0x8CA2;
const GLenum GL_STENCIL_BACK_REF = 0x8CA3;
const GLenum GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
const GLenum GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
const GLenum GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
const GLenum GL_FRAMEBUFFER_BINDING = 0x8CA6;
const GLenum GL_RENDERBUFFER_BINDING = 0x8CA7;
const GLenum GL_READ_FRAMEBUFFER = 0x8CA8;
const GLenum GL_DRAW_FRAMEBUFFER = 0x8CA9;
const GLenum GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
const GLenum GL_RENDERBUFFER_SAMPLES = 0x8CAB;
const GLenum GL_DEPTH_COMPONENT32F = 0x8CAC;
const GLenum GL_DEPTH32F_STENCIL8 = 0x8CAD;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
const GLenum GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
const GLenum GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
const GLenum GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
const GLenum GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
const GLenum GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
const GLenum GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
const GLenum GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
const GLenum GL_COLOR_ATTACHMENT0 = 0x8CE0;
const GLenum GL_COLOR_ATTACHMENT1 = 0x8CE1;
const GLenum GL_COLOR_ATTACHMENT2 = 0x8CE2;
const GLenum GL_COLOR_ATTACHMENT3 = 0x8CE3;
const GLenum GL_COLOR_ATTACHMENT4 = 0x8CE4;
const GLenum GL_COLOR_ATTACHMENT5 = 0x8CE5;
const GLenum GL_COLOR_ATTACHMENT6 = 0x8CE6;
const GLenum GL_COLOR_ATTACHMENT7 = 0x8CE7;
const GLenum GL_COLOR_ATTACHMENT8 = 0x8CE8;
const GLenum GL_COLOR_ATTACHMENT9 = 0x8CE9;
const GLenum GL_COLOR_ATTACHMENT10 = 0x8CEA;
const GLenum GL_COLOR_ATTACHMENT11 = 0x8CEB;
const GLenum GL_COLOR_ATTACHMENT12 = 0x8CEC;
const GLenum GL_COLOR_ATTACHMENT13 = 0x8CED;
const GLenum GL_COLOR_ATTACHMENT14 = 0x8CEE;
const GLenum GL_COLOR_ATTACHMENT15 = 0x8CEF;
const GLenum GL_DEPTH_ATTACHMENT = 0x8D00;
const GLenum GL_STENCIL_ATTACHMENT = 0x8D20;
const GLenum GL_FRAMEBUFFER = 0x8D40;
const GLenum GL_RENDERBUFFER = 0x8D41;
const GLenum GL_RENDERBUFFER_WIDTH = 0x8D42;
const GLenum GL_RENDERBUFFER_HEIGHT = 0x8D43;
const GLenum GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
const GLenum GL_STENCIL_INDEX1 = 0x8D46;
const GLenum GL_STENCIL_INDEX4 = 0x8D47;
const GLenum GL_STENCIL_INDEX8 = 0x8D48;
const GLenum GL_STENCIL_INDEX16 = 0x8D49;
const GLenum GL_RENDERBUFFER_RED_SIZE = 0x8D50;
const GLenum GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
const GLenum GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
const GLenum GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
const GLenum GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
const GLenum GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
const GLenum GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
const GLenum GL_MAX_SAMPLES = 0x8D57;
const GLenum GL_RGB565 = 0x8D62;
const GLenum GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
const GLenum GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
const GLenum GL_MAX_ELEMENT_INDEX = 0x8D6B;
const GLenum GL_RGBA32UI = 0x8D70;
const GLenum GL_RGB32UI = 0x8D71;
const GLenum GL_RGBA16UI = 0x8D76;
const GLenum GL_RGB16UI = 0x8D77;
const GLenum GL_RGBA8UI = 0x8D7C;
const GLenum GL_RGB8UI = 0x8D7D;
const GLenum GL_RGBA32I = 0x8D82;
const GLenum GL_RGB32I = 0x8D83;
const GLenum GL_RGBA16I = 0x8D88;
const GLenum GL_RGB16I = 0x8D89;
const GLenum GL_RGBA8I = 0x8D8E;
const GLenum GL_RGB8I = 0x8D8F;
const GLenum GL_RED_INTEGER = 0x8D94;
const GLenum GL_GREEN_INTEGER = 0x8D95;
const GLenum GL_BLUE_INTEGER = 0x8D96;
const GLenum GL_ALPHA_INTEGER = 0x8D97;
const GLenum GL_RGB_INTEGER = 0x8D98;
const GLenum GL_RGBA_INTEGER = 0x8D99;
const GLenum GL_BGR_INTEGER = 0x8D9A;
const GLenum GL_BGRA_INTEGER = 0x8D9B;
const GLenum GL_INT_2_10_10_10_REV = 0x8D9F;
const GLenum GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
const GLenum GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
const GLenum GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
const GLenum GL_FRAMEBUFFER_SRGB = 0x8DB9;
const GLenum GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
const GLenum GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
const GLenum GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
const GLenum GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
const GLenum GL_SAMPLER_1D_ARRAY = 0x8DC0;
const GLenum GL_SAMPLER_2D_ARRAY = 0x8DC1;
const GLenum GL_SAMPLER_BUFFER = 0x8DC2;
const GLenum GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
const GLenum GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
const GLenum GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
const GLenum GL_UNSIGNED_INT_VEC2 = 0x8DC6;
const GLenum GL_UNSIGNED_INT_VEC3 = 0x8DC7;
const GLenum GL_UNSIGNED_INT_VEC4 = 0x8DC8;
const GLenum GL_INT_SAMPLER_1D = 0x8DC9;
const GLenum GL_INT_SAMPLER_2D = 0x8DCA;
const GLenum GL_INT_SAMPLER_3D = 0x8DCB;
const GLenum GL_INT_SAMPLER_CUBE = 0x8DCC;
const GLenum GL_INT_SAMPLER_2D_RECT = 0x8DCD;
const GLenum GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
const GLenum GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
const GLenum GL_INT_SAMPLER_BUFFER = 0x8DD0;
const GLenum GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
const GLenum GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
const GLenum GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
const GLenum GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
const GLenum GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
const GLenum GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
const GLenum GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
const GLenum GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
const GLenum GL_GEOMETRY_SHADER = 0x8DD9;
const GLenum GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
const GLenum GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
const GLenum GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
const GLenum GL_ACTIVE_SUBROUTINES = 0x8DE5;
const GLenum GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
const GLenum GL_MAX_SUBROUTINES = 0x8DE7;
const GLenum GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
const GLenum GL_LOW_FLOAT = 0x8DF0;
const GLenum GL_MEDIUM_FLOAT = 0x8DF1;
const GLenum GL_HIGH_FLOAT = 0x8DF2;
const GLenum GL_LOW_INT = 0x8DF3;
const GLenum GL_MEDIUM_INT = 0x8DF4;
const GLenum GL_HIGH_INT = 0x8DF5;
const GLenum GL_SHADER_BINARY_FORMATS = 0x8DF8;
const GLenum GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
const GLenum GL_SHADER_COMPILER = 0x8DFA;
const GLenum GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
const GLenum GL_MAX_VARYING_VECTORS = 0x8DFC;
const GLenum GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
const GLenum GL_QUERY_WAIT = 0x8E13;
const GLenum GL_QUERY_NO_WAIT = 0x8E14;
const GLenum GL_QUERY_BY_REGION_WAIT = 0x8E15;
const GLenum GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
const GLenum GL_QUERY_WAIT_INVERTED = 0x8E17;
const GLenum GL_QUERY_NO_WAIT_INVERTED = 0x8E18;
const GLenum GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19;
const GLenum GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A;
const GLenum GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
const GLenum GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
const GLenum GL_TRANSFORM_FEEDBACK = 0x8E22;
const GLenum GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
const GLenum GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
const GLenum GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
const GLenum GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
const GLenum GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
const GLenum GL_TIMESTAMP = 0x8E28;
const GLenum GL_TEXTURE_SWIZZLE_R = 0x8E42;
const GLenum GL_TEXTURE_SWIZZLE_G = 0x8E43;
const GLenum GL_TEXTURE_SWIZZLE_B = 0x8E44;
const GLenum GL_TEXTURE_SWIZZLE_A = 0x8E45;
const GLenum GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
const GLenum GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
const GLenum GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
const GLenum GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
const GLenum GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
const GLenum GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
const GLenum GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
const GLenum GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
const GLenum GL_LAST_VERTEX_CONVENTION = 0x8E4E;
const GLenum GL_PROVOKING_VERTEX = 0x8E4F;
const GLenum GL_SAMPLE_POSITION = 0x8E50;
const GLenum GL_SAMPLE_MASK = 0x8E51;
const GLenum GL_SAMPLE_MASK_VALUE = 0x8E52;
const GLenum GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
const GLenum GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
const GLenum GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
const GLenum GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
const GLenum GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
const GLenum GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
const GLenum GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
const GLenum GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
const GLenum GL_MAX_VERTEX_STREAMS = 0x8E71;
const GLenum GL_PATCH_VERTICES = 0x8E72;
const GLenum GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
const GLenum GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
const GLenum GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
const GLenum GL_TESS_GEN_MODE = 0x8E76;
const GLenum GL_TESS_GEN_SPACING = 0x8E77;
const GLenum GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
const GLenum GL_TESS_GEN_POINT_MODE = 0x8E79;
const GLenum GL_ISOLINES = 0x8E7A;
const GLenum GL_FRACTIONAL_ODD = 0x8E7B;
const GLenum GL_FRACTIONAL_EVEN = 0x8E7C;
const GLenum GL_MAX_PATCH_VERTICES = 0x8E7D;
const GLenum GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
const GLenum GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
const GLenum GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
const GLenum GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
const GLenum GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
const GLenum GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
const GLenum GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
const GLenum GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
const GLenum GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
const GLenum GL_TESS_EVALUATION_SHADER = 0x8E87;
const GLenum GL_TESS_CONTROL_SHADER = 0x8E88;
const GLenum GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
const GLenum GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
const GLenum GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
const GLenum GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
const GLenum GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
const GLenum GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
const GLenum GL_COPY_READ_BUFFER = 0x8F36;
const GLenum GL_COPY_READ_BUFFER_BINDING = 0x8F36;
const GLenum GL_COPY_WRITE_BUFFER = 0x8F37;
const GLenum GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
const GLenum GL_MAX_IMAGE_UNITS = 0x8F38;
const GLenum GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
const GLenum GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
const GLenum GL_IMAGE_BINDING_NAME = 0x8F3A;
const GLenum GL_IMAGE_BINDING_LEVEL = 0x8F3B;
const GLenum GL_IMAGE_BINDING_LAYERED = 0x8F3C;
const GLenum GL_IMAGE_BINDING_LAYER = 0x8F3D;
const GLenum GL_IMAGE_BINDING_ACCESS = 0x8F3E;
const GLenum GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
const GLenum GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
const GLenum GL_DOUBLE_MAT2 = 0x8F46;
const GLenum GL_DOUBLE_MAT3 = 0x8F47;
const GLenum GL_DOUBLE_MAT4 = 0x8F48;
const GLenum GL_DOUBLE_MAT2x3 = 0x8F49;
const GLenum GL_DOUBLE_MAT2x4 = 0x8F4A;
const GLenum GL_DOUBLE_MAT3x2 = 0x8F4B;
const GLenum GL_DOUBLE_MAT3x4 = 0x8F4C;
const GLenum GL_DOUBLE_MAT4x2 = 0x8F4D;
const GLenum GL_DOUBLE_MAT4x3 = 0x8F4E;
const GLenum GL_VERTEX_BINDING_BUFFER = 0x8F4F;
const GLenum GL_R8_SNORM = 0x8F94;
const GLenum GL_RG8_SNORM = 0x8F95;
const GLenum GL_RGB8_SNORM = 0x8F96;
const GLenum GL_RGBA8_SNORM = 0x8F97;
const GLenum GL_R16_SNORM = 0x8F98;
const GLenum GL_RG16_SNORM = 0x8F99;
const GLenum GL_RGB16_SNORM = 0x8F9A;
const GLenum GL_RGBA16_SNORM = 0x8F9B;
const GLenum GL_SIGNED_NORMALIZED = 0x8F9C;
const GLenum GL_PRIMITIVE_RESTART = 0x8F9D;
const GLenum GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
const GLenum GL_DOUBLE_VEC2 = 0x8FFC;
const GLenum GL_DOUBLE_VEC3 = 0x8FFD;
const GLenum GL_DOUBLE_VEC4 = 0x8FFE;
const GLenum GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
const GLenum GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
const GLenum GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
const GLenum GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
const GLenum GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
const GLenum GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
const GLenum GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
const GLenum GL_IMAGE_1D = 0x904C;
const GLenum GL_IMAGE_2D = 0x904D;
const GLenum GL_IMAGE_3D = 0x904E;
const GLenum GL_IMAGE_2D_RECT = 0x904F;
const GLenum GL_IMAGE_CUBE = 0x9050;
const GLenum GL_IMAGE_BUFFER = 0x9051;
const GLenum GL_IMAGE_1D_ARRAY = 0x9052;
const GLenum GL_IMAGE_2D_ARRAY = 0x9053;
const GLenum GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
const GLenum GL_IMAGE_2D_MULTISAMPLE = 0x9055;
const GLenum GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
const GLenum GL_INT_IMAGE_1D = 0x9057;
const GLenum GL_INT_IMAGE_2D = 0x9058;
const GLenum GL_INT_IMAGE_3D = 0x9059;
const GLenum GL_INT_IMAGE_2D_RECT = 0x905A;
const GLenum GL_INT_IMAGE_CUBE = 0x905B;
const GLenum GL_INT_IMAGE_BUFFER = 0x905C;
const GLenum GL_INT_IMAGE_1D_ARRAY = 0x905D;
const GLenum GL_INT_IMAGE_2D_ARRAY = 0x905E;
const GLenum GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
const GLenum GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
const GLenum GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
const GLenum GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
const GLenum GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
const GLenum GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
const GLenum GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
const GLenum GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
const GLenum GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
const GLenum GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
const GLenum GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
const GLenum GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
const GLenum GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
const GLenum GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
const GLenum GL_MAX_IMAGE_SAMPLES = 0x906D;
const GLenum GL_IMAGE_BINDING_FORMAT = 0x906E;
const GLenum GL_RGB10_A2UI = 0x906F;
const GLenum GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
const GLenum GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
const GLenum GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
const GLenum GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
const GLenum GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
const GLenum GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
const GLenum GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
const GLenum GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
const GLenum GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
const GLenum GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
const GLenum GL_SHADER_STORAGE_BUFFER = 0x90D2;
const GLenum GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
const GLenum GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
const GLenum GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
const GLenum GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
const GLenum GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
const GLenum GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
const GLenum GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
const GLenum GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
const GLenum GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
const GLenum GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
const GLenum GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
const GLenum GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
const GLenum GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
const GLenum GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
const GLenum GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
const GLenum GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
const GLenum GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
const GLenum GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
const GLenum GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
const GLenum GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
const GLenum GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
const GLenum GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
const GLenum GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
const GLenum GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
const GLenum GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
const GLenum GL_TEXTURE_SAMPLES = 0x9106;
const GLenum GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
const GLenum GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
const GLenum GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
const GLenum GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
const GLenum GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
const GLenum GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
const GLenum GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
const GLenum GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
const GLenum GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
const GLenum GL_MAX_INTEGER_SAMPLES = 0x9110;
const GLenum GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
const GLenum GL_OBJECT_TYPE = 0x9112;
const GLenum GL_SYNC_CONDITION = 0x9113;
const GLenum GL_SYNC_STATUS = 0x9114;
const GLenum GL_SYNC_FLAGS = 0x9115;
const GLenum GL_SYNC_FENCE = 0x9116;
const GLenum GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
const GLenum GL_UNSIGNALED = 0x9118;
const GLenum GL_SIGNALED = 0x9119;
const GLenum GL_ALREADY_SIGNALED = 0x911A;
const GLenum GL_TIMEOUT_EXPIRED = 0x911B;
const GLenum GL_CONDITION_SATISFIED = 0x911C;
const GLenum GL_WAIT_FAILED = 0x911D;
const GLenum GL_BUFFER_ACCESS_FLAGS = 0x911F;
const GLenum GL_BUFFER_MAP_LENGTH = 0x9120;
const GLenum GL_BUFFER_MAP_OFFSET = 0x9121;
const GLenum GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
const GLenum GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
const GLenum GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
const GLenum GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
const GLenum GL_CONTEXT_PROFILE_MASK = 0x9126;
const GLenum GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
const GLenum GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
const GLenum GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
const GLenum GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
const GLenum GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
const GLenum GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
const GLenum GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
const GLenum GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
const GLenum GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
const GLenum GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
const GLenum GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
const GLenum GL_DEBUG_LOGGED_MESSAGES = 0x9145;
const GLenum GL_DEBUG_SEVERITY_HIGH = 0x9146;
const GLenum GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
const GLenum GL_DEBUG_SEVERITY_LOW = 0x9148;
const GLenum GL_QUERY_BUFFER = 0x9192;
const GLenum GL_QUERY_BUFFER_BINDING = 0x9193;
const GLenum GL_QUERY_RESULT_NO_WAIT = 0x9194;
const GLenum GL_TEXTURE_BUFFER_OFFSET = 0x919D;
const GLenum GL_TEXTURE_BUFFER_SIZE = 0x919E;
const GLenum GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
const GLenum GL_COMPUTE_SHADER = 0x91B9;
const GLenum GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
const GLenum GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
const GLenum GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
const GLenum GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
const GLenum GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
const GLenum GL_COMPRESSED_R11_EAC = 0x9270;
const GLenum GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
const GLenum GL_COMPRESSED_RG11_EAC = 0x9272;
const GLenum GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
const GLenum GL_COMPRESSED_RGB8_ETC2 = 0x9274;
const GLenum GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
const GLenum GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
const GLenum GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
const GLenum GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
const GLenum GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
const GLenum GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
const GLenum GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
const GLenum GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
const GLenum GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
const GLenum GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
const GLenum GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
const GLenum GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
const GLenum GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
const GLenum GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
const GLenum GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
const GLenum GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
const GLenum GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
const GLenum GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
const GLenum GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
const GLenum GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
const GLenum GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
const GLenum GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
const GLenum GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
const GLenum GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
const GLenum GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
const GLenum GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
const GLenum GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
const GLenum GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
const GLenum GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
const GLenum GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
const GLenum GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
const GLenum GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
const GLenum GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
const GLenum GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
const GLenum GL_DEBUG_OUTPUT = 0x92E0;
const GLenum GL_UNIFORM = 0x92E1;
const GLenum GL_UNIFORM_BLOCK = 0x92E2;
const GLenum GL_PROGRAM_INPUT = 0x92E3;
const GLenum GL_PROGRAM_OUTPUT = 0x92E4;
const GLenum GL_BUFFER_VARIABLE = 0x92E5;
const GLenum GL_SHADER_STORAGE_BLOCK = 0x92E6;
const GLenum GL_IS_PER_PATCH = 0x92E7;
const GLenum GL_VERTEX_SUBROUTINE = 0x92E8;
const GLenum GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
const GLenum GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
const GLenum GL_GEOMETRY_SUBROUTINE = 0x92EB;
const GLenum GL_FRAGMENT_SUBROUTINE = 0x92EC;
const GLenum GL_COMPUTE_SUBROUTINE = 0x92ED;
const GLenum GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
const GLenum GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
const GLenum GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
const GLenum GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
const GLenum GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
const GLenum GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
const GLenum GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
const GLenum GL_ACTIVE_RESOURCES = 0x92F5;
const GLenum GL_MAX_NAME_LENGTH = 0x92F6;
const GLenum GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
const GLenum GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
const GLenum GL_NAME_LENGTH = 0x92F9;
const GLenum GL_TYPE = 0x92FA;
const GLenum GL_ARRAY_SIZE = 0x92FB;
const GLenum GL_OFFSET = 0x92FC;
const GLenum GL_BLOCK_INDEX = 0x92FD;
const GLenum GL_ARRAY_STRIDE = 0x92FE;
const GLenum GL_MATRIX_STRIDE = 0x92FF;
const GLenum GL_IS_ROW_MAJOR = 0x9300;
const GLenum GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
const GLenum GL_BUFFER_BINDING = 0x9302;
const GLenum GL_BUFFER_DATA_SIZE = 0x9303;
const GLenum GL_NUM_ACTIVE_VARIABLES = 0x9304;
const GLenum GL_ACTIVE_VARIABLES = 0x9305;
const GLenum GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
const GLenum GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
const GLenum GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
const GLenum GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
const GLenum GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
const GLenum GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
const GLenum GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
const GLenum GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
const GLenum GL_LOCATION = 0x930E;
const GLenum GL_LOCATION_INDEX = 0x930F;
const GLenum GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
const GLenum GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
const GLenum GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
const GLenum GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
const GLenum GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
const GLenum GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
const GLenum GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
const GLenum GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
const GLenum GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
const GLenum GL_LOCATION_COMPONENT = 0x934A;
const GLenum GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
const GLenum GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;
const GLenum GL_CLIP_ORIGIN = 0x935C;
const GLenum GL_CLIP_DEPTH_MODE = 0x935D;
const GLenum GL_NEGATIVE_ONE_TO_ONE = 0x935E;
const GLenum GL_ZERO_TO_ONE = 0x935F;
const GLenum GL_CLEAR_TEXTURE = 0x9365;
const GLenum GL_NUM_SAMPLE_COUNTS = 0x9380;

WINGDIAPI void APIENTRY glBindTexture(GLenum target, GLuint texture);
WINGDIAPI void APIENTRY glBlendFunc(GLenum sfactor, GLenum dfactor);
WINGDIAPI void APIENTRY glClear(GLbitfield mask);
WINGDIAPI void APIENTRY glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
WINGDIAPI void APIENTRY glClearDepth(GLdouble depth);
WINGDIAPI void APIENTRY glClearStencil(GLint s);
WINGDIAPI void APIENTRY glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
WINGDIAPI void APIENTRY glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
WINGDIAPI void APIENTRY glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
WINGDIAPI void APIENTRY glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
WINGDIAPI void APIENTRY glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
WINGDIAPI void APIENTRY glCullFace(GLenum mode);
WINGDIAPI void APIENTRY glDeleteTextures(GLsizei n, const GLuint* textures);
WINGDIAPI void APIENTRY glDepthFunc(GLenum func);
WINGDIAPI void APIENTRY glDepthMask(GLboolean flag);
WINGDIAPI void APIENTRY glDepthRange(GLdouble near, GLdouble far);
WINGDIAPI void APIENTRY glDisable(GLenum cap);
WINGDIAPI void APIENTRY glDrawArrays(GLenum mode, GLint first, GLsizei count);
WINGDIAPI void APIENTRY glDrawBuffer(GLenum buf);
WINGDIAPI void APIENTRY glDrawElements(GLenum mode, GLsizei count, GLenum type, const void* indices);
WINGDIAPI void APIENTRY glEnable(GLenum cap);
WINGDIAPI void APIENTRY glFinish();
WINGDIAPI void APIENTRY glFlush();
WINGDIAPI void APIENTRY glFrontFace(GLenum mode);
WINGDIAPI void APIENTRY glGenTextures(GLsizei n, GLuint* textures);
WINGDIAPI void APIENTRY glGetBooleanv(GLenum pname, GLboolean* data);
WINGDIAPI void APIENTRY glGetDoublev(GLenum pname, GLdouble* data);
WINGDIAPI GLenum APIENTRY glGetError();
WINGDIAPI void APIENTRY glGetFloatv(GLenum pname, GLfloat* data);
WINGDIAPI void APIENTRY glGetIntegerv(GLenum pname, GLint* data);
WINGDIAPI const GLubyte* APIENTRY glGetString(GLenum name);
WINGDIAPI void APIENTRY glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void* pixels);
WINGDIAPI void APIENTRY glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat* params);
WINGDIAPI void APIENTRY glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint* params);
WINGDIAPI void APIENTRY glGetTexParameterfv(GLenum target, GLenum pname, GLfloat* params);
WINGDIAPI void APIENTRY glGetTexParameteriv(GLenum target, GLenum pname, GLint* params);
WINGDIAPI void APIENTRY glHint(GLenum target, GLenum mode);
WINGDIAPI GLboolean APIENTRY glIsEnabled(GLenum cap);
WINGDIAPI GLboolean APIENTRY glIsTexture(GLuint texture);
WINGDIAPI void APIENTRY glLineWidth(GLfloat width);
WINGDIAPI void APIENTRY glLogicOp(GLenum opcode);
WINGDIAPI void APIENTRY glPixelStoref(GLenum pname, GLfloat param);
WINGDIAPI void APIENTRY glPixelStorei(GLenum pname, GLint param);
WINGDIAPI void APIENTRY glPointSize(GLfloat size);
WINGDIAPI void APIENTRY glPolygonMode(GLenum face, GLenum mode);
WINGDIAPI void APIENTRY glPolygonOffset(GLfloat factor, GLfloat units);
WINGDIAPI void APIENTRY glReadBuffer(GLenum src);
WINGDIAPI void APIENTRY glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
WINGDIAPI void APIENTRY glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
WINGDIAPI void APIENTRY glStencilFunc(GLenum func, GLint ref, GLuint mask);
WINGDIAPI void APIENTRY glStencilMask(GLuint mask);
WINGDIAPI void APIENTRY glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
WINGDIAPI void APIENTRY glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void* pixels);
WINGDIAPI void APIENTRY glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels);
WINGDIAPI void APIENTRY glTexParameterf(GLenum target, GLenum pname, GLfloat param);
WINGDIAPI void APIENTRY glTexParameterfv(GLenum target, GLenum pname, const GLfloat* params);
WINGDIAPI void APIENTRY glTexParameteri(GLenum target, GLenum pname, GLint param);
WINGDIAPI void APIENTRY glTexParameteriv(GLenum target, GLenum pname, const GLint* params);
WINGDIAPI void APIENTRY glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
WINGDIAPI void APIENTRY glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
WINGDIAPI void APIENTRY glViewport(GLint x, GLint y, GLsizei width, GLsizei height);

GLCOREAPI void APIENTRY glActiveShaderProgram(GLuint pipeline, GLuint program);
GLCOREAPI void APIENTRY glActiveTexture(GLenum texture);
GLCOREAPI void APIENTRY glAttachShader(GLuint program, GLuint shader);
GLCOREAPI void APIENTRY glBeginConditionalRender(GLuint id, GLenum mode);
GLCOREAPI void APIENTRY glBeginQuery(GLenum target, GLuint id);
GLCOREAPI void APIENTRY glBeginQueryIndexed(GLenum target, GLuint index, GLuint id);
GLCOREAPI void APIENTRY glBeginTransformFeedback(GLenum primitiveMode);
GLCOREAPI void APIENTRY glBindAttribLocation(GLuint program, GLuint index, const GLchar* name);
GLCOREAPI void APIENTRY glBindBuffer(GLenum target, GLuint buffer);
GLCOREAPI void APIENTRY glBindBufferBase(GLenum target, GLuint index, GLuint buffer);
GLCOREAPI void APIENTRY glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLCOREAPI void APIENTRY glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint* buffers);
GLCOREAPI void APIENTRY glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizeiptr* sizes);
GLCOREAPI void APIENTRY glBindFragDataLocation(GLuint program, GLuint color, const GLchar* name);
GLCOREAPI void APIENTRY glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar* name);
GLCOREAPI void APIENTRY glBindFramebuffer(GLenum target, GLuint framebuffer);
GLCOREAPI void APIENTRY glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
GLCOREAPI void APIENTRY glBindImageTextures(GLuint first, GLsizei count, const GLuint* textures);
GLCOREAPI void APIENTRY glBindProgramPipeline(GLuint pipeline);
GLCOREAPI void APIENTRY glBindRenderbuffer(GLenum target, GLuint renderbuffer);
GLCOREAPI void APIENTRY glBindSampler(GLuint unit, GLuint sampler);
GLCOREAPI void APIENTRY glBindSamplers(GLuint first, GLsizei count, const GLuint* samplers);
GLCOREAPI void APIENTRY glBindTextureUnit(GLuint unit, GLuint texture);
GLCOREAPI void APIENTRY glBindTextures(GLuint first, GLsizei count, const GLuint* textures);
GLCOREAPI void APIENTRY glBindTransformFeedback(GLenum target, GLuint id);
GLCOREAPI void APIENTRY glBindVertexArray(GLuint array);
GLCOREAPI void APIENTRY glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
GLCOREAPI void APIENTRY glBindVertexBuffers(GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides);
GLCOREAPI void APIENTRY glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
GLCOREAPI void APIENTRY glBlendEquation(GLenum mode);
GLCOREAPI void APIENTRY glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
GLCOREAPI void APIENTRY glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
GLCOREAPI void APIENTRY glBlendEquationi(GLuint buf, GLenum mode);
GLCOREAPI void APIENTRY glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
GLCOREAPI void APIENTRY glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
GLCOREAPI void APIENTRY glBlendFunci(GLuint buf, GLenum src, GLenum dst);
GLCOREAPI void APIENTRY glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLCOREAPI void APIENTRY glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
GLCOREAPI void APIENTRY glBufferData(GLenum target, GLsizeiptr size, const void* data, GLenum usage);
GLCOREAPI void APIENTRY glBufferStorage(GLenum target, GLsizeiptr size, const void* data, GLbitfield flags);
GLCOREAPI void APIENTRY glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void* data);
GLCOREAPI GLenum APIENTRY glCheckFramebufferStatus(GLenum target);
GLCOREAPI GLenum APIENTRY glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target);
GLCOREAPI void APIENTRY glClampColor(GLenum target, GLenum clamp);
GLCOREAPI void APIENTRY glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void* data);
GLCOREAPI void APIENTRY glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void* data);
GLCOREAPI void APIENTRY glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
GLCOREAPI void APIENTRY glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat* value);
GLCOREAPI void APIENTRY glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint* value);
GLCOREAPI void APIENTRY glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint* value);
GLCOREAPI void APIENTRY glClearDepthf(GLfloat d);
GLCOREAPI void APIENTRY glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void* data);
GLCOREAPI void APIENTRY glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizei size, GLenum format, GLenum type, const void* data);
GLCOREAPI void APIENTRY glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, const GLfloat depth, GLint stencil);
GLCOREAPI void APIENTRY glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat* value);
GLCOREAPI void APIENTRY glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint* value);
GLCOREAPI void APIENTRY glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint* value);
GLCOREAPI void APIENTRY glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void* data);
GLCOREAPI void APIENTRY glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* data);
GLCOREAPI GLenum APIENTRY glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
GLCOREAPI void APIENTRY glClipControl(GLenum origin, GLenum depth);
GLCOREAPI void APIENTRY glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
GLCOREAPI void APIENTRY glCompileShader(GLuint shader);
GLCOREAPI void APIENTRY glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void* data);
GLCOREAPI void APIENTRY glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data);
GLCOREAPI void APIENTRY glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void* data);
GLCOREAPI void APIENTRY glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
GLCOREAPI void APIENTRY glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
GLCOREAPI void APIENTRY glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
GLCOREAPI void APIENTRY glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void* data);
GLCOREAPI void APIENTRY glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
GLCOREAPI void APIENTRY glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void* data);
GLCOREAPI void APIENTRY glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
GLCOREAPI void APIENTRY glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
GLCOREAPI void APIENTRY glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizei size);
GLCOREAPI void APIENTRY glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLCOREAPI void APIENTRY glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
GLCOREAPI void APIENTRY glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLCOREAPI void APIENTRY glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
GLCOREAPI void APIENTRY glCreateBuffers(GLsizei n, GLuint* buffers);
GLCOREAPI void APIENTRY glCreateFramebuffers(GLsizei n, GLuint* framebuffers);
GLCOREAPI GLuint APIENTRY glCreateProgram();
GLCOREAPI void APIENTRY glCreateProgramPipelines(GLsizei n, GLuint* pipelines);
GLCOREAPI void APIENTRY glCreateQueries(GLenum target, GLsizei n, GLuint* ids);
GLCOREAPI void APIENTRY glCreateRenderbuffers(GLsizei n, GLuint* renderbuffers);
GLCOREAPI void APIENTRY glCreateSamplers(GLsizei n, GLuint* samplers);
GLCOREAPI GLuint APIENTRY glCreateShader(GLenum type);
GLCOREAPI GLuint APIENTRY glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar* const* strings);
GLCOREAPI void APIENTRY glCreateTextures(GLenum target, GLsizei n, GLuint* textures);
GLCOREAPI void APIENTRY glCreateTransformFeedbacks(GLsizei n, GLuint* ids);
GLCOREAPI void APIENTRY glCreateVertexArrays(GLsizei n, GLuint* arrays);
GLCOREAPI void APIENTRY glDebugMessageCallback(GLDEBUGPROC callback, const void* userParam);
GLCOREAPI void APIENTRY glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint* ids, GLboolean enabled);
GLCOREAPI void APIENTRY glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* buf);
GLCOREAPI void APIENTRY glDeleteBuffers(GLsizei n, const GLuint* buffers);
GLCOREAPI void APIENTRY glDeleteFramebuffers(GLsizei n, const GLuint* framebuffers);
GLCOREAPI void APIENTRY glDeleteProgram(GLuint program);
GLCOREAPI void APIENTRY glDeleteProgramPipelines(GLsizei n, const GLuint* pipelines);
GLCOREAPI void APIENTRY glDeleteQueries(GLsizei n, const GLuint* ids);
GLCOREAPI void APIENTRY glDeleteRenderbuffers(GLsizei n, const GLuint* renderbuffers);
GLCOREAPI void APIENTRY glDeleteSamplers(GLsizei count, const GLuint* samplers);
GLCOREAPI void APIENTRY glDeleteShader(GLuint shader);
GLCOREAPI void APIENTRY glDeleteSync(GLsync sync);
GLCOREAPI void APIENTRY glDeleteTransformFeedbacks(GLsizei n, const GLuint* ids);
GLCOREAPI void APIENTRY glDeleteVertexArrays(GLsizei n, const GLuint* arrays);
GLCOREAPI void APIENTRY glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble* v);
GLCOREAPI void APIENTRY glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f);
GLCOREAPI void APIENTRY glDepthRangef(GLfloat n, GLfloat f);
GLCOREAPI void APIENTRY glDetachShader(GLuint program, GLuint shader);
GLCOREAPI void APIENTRY glDisableVertexArrayAttrib(GLuint vaobj, GLuint index);
GLCOREAPI void APIENTRY glDisableVertexAttribArray(GLuint index);
GLCOREAPI void APIENTRY glDisablei(GLenum target, GLuint index);
GLCOREAPI void APIENTRY glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
GLCOREAPI void APIENTRY glDispatchComputeIndirect(GLintptr indirect);
GLCOREAPI void APIENTRY glDrawArraysIndirect(GLenum mode, const void* indirect);
GLCOREAPI void APIENTRY glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
GLCOREAPI void APIENTRY glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
GLCOREAPI void APIENTRY glDrawBuffers(GLsizei n, const GLenum* bufs);
GLCOREAPI void APIENTRY glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void* indices, GLint basevertex);
GLCOREAPI void APIENTRY glDrawElementsIndirect(GLenum mode, GLenum type, const void* indirect);
GLCOREAPI void APIENTRY glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount);
GLCOREAPI void APIENTRY glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLuint baseinstance);
GLCOREAPI void APIENTRY glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex);
GLCOREAPI void APIENTRY glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
GLCOREAPI void APIENTRY glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices);
GLCOREAPI void APIENTRY glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void* indices, GLint basevertex);
GLCOREAPI void APIENTRY glDrawTransformFeedback(GLenum mode, GLuint id);
GLCOREAPI void APIENTRY glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount);
GLCOREAPI void APIENTRY glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream);
GLCOREAPI void APIENTRY glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
GLCOREAPI void APIENTRY glEnableVertexArrayAttrib(GLuint vaobj, GLuint index);
GLCOREAPI void APIENTRY glEnableVertexAttribArray(GLuint index);
GLCOREAPI void APIENTRY glEnablei(GLenum target, GLuint index);
GLCOREAPI void APIENTRY glEndConditionalRender();
GLCOREAPI void APIENTRY glEndQuery(GLenum target);
GLCOREAPI void APIENTRY glEndQueryIndexed(GLenum target, GLuint index);
GLCOREAPI void APIENTRY glEndTransformFeedback();
GLCOREAPI GLsync APIENTRY glFenceSync(GLenum condition, GLbitfield flags);
GLCOREAPI void APIENTRY glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
GLCOREAPI void APIENTRY glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizei length);
GLCOREAPI void APIENTRY glFramebufferParameteri(GLenum target, GLenum pname, GLint param);
GLCOREAPI void APIENTRY glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
GLCOREAPI void APIENTRY glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);
GLCOREAPI void APIENTRY glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLCOREAPI void APIENTRY glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
GLCOREAPI void APIENTRY glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
GLCOREAPI void APIENTRY glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
GLCOREAPI void APIENTRY glGenBuffers(GLsizei n, GLuint* buffers);
GLCOREAPI void APIENTRY glGenFramebuffers(GLsizei n, GLuint* framebuffers);
GLCOREAPI void APIENTRY glGenProgramPipelines(GLsizei n, GLuint* pipelines);
GLCOREAPI void APIENTRY glGenQueries(GLsizei n, GLuint* ids);
GLCOREAPI void APIENTRY glGenRenderbuffers(GLsizei n, GLuint* renderbuffers);
GLCOREAPI void APIENTRY glGenSamplers(GLsizei count, GLuint* samplers);
GLCOREAPI void APIENTRY glGenTransformFeedbacks(GLsizei n, GLuint* ids);
GLCOREAPI void APIENTRY glGenVertexArrays(GLsizei n, GLuint* arrays);
GLCOREAPI void APIENTRY glGenerateMipmap(GLenum target);
GLCOREAPI void APIENTRY glGenerateTextureMipmap(GLuint texture);
GLCOREAPI void APIENTRY glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
GLCOREAPI void APIENTRY glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar* name);
GLCOREAPI void APIENTRY glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei* length, GLchar* name);
GLCOREAPI void APIENTRY glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint* values);
GLCOREAPI void APIENTRY glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
GLCOREAPI void APIENTRY glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformBlockName);
GLCOREAPI void APIENTRY glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei* length, GLchar* uniformName);
GLCOREAPI void APIENTRY glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint* uniformIndices, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei* count, GLuint* shaders);
GLCOREAPI GLint APIENTRY glGetAttribLocation(GLuint program, const GLchar* name);
GLCOREAPI void APIENTRY glGetBooleani_v(GLenum target, GLuint index, GLboolean* data);
GLCOREAPI void APIENTRY glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64* params);
GLCOREAPI void APIENTRY glGetBufferParameteriv(GLenum target, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetBufferPointerv(GLenum target, GLenum pname, void** params);
GLCOREAPI void APIENTRY glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void* data);
GLCOREAPI void APIENTRY glGetCompressedTexImage(GLenum target, GLint level, void* img);
GLCOREAPI void APIENTRY glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void* pixels);
GLCOREAPI void APIENTRY glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void* pixels);
GLCOREAPI GLuint APIENTRY glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum* sources, GLenum* types, GLuint* ids, GLenum* severities, GLsizei* lengths, GLchar* messageLog);
GLCOREAPI void APIENTRY glGetDoublei_v(GLenum target, GLuint index, GLdouble* data);
GLCOREAPI void APIENTRY glGetFloati_v(GLenum target, GLuint index, GLfloat* data);
GLCOREAPI GLint APIENTRY glGetFragDataIndex(GLuint program, const GLchar* name);
GLCOREAPI GLint APIENTRY glGetFragDataLocation(GLuint program, const GLchar* name);
GLCOREAPI void APIENTRY glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint* params);
GLCOREAPI GLenum APIENTRY glGetGraphicsResetStatus();
GLCOREAPI void APIENTRY glGetInteger64i_v(GLenum target, GLuint index, GLint64* data);
GLCOREAPI void APIENTRY glGetInteger64v(GLenum pname, GLint64* data);
GLCOREAPI void APIENTRY glGetIntegeri_v(GLenum target, GLuint index, GLint* data);
GLCOREAPI void APIENTRY glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64* params);
GLCOREAPI void APIENTRY glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint* params);
GLCOREAPI void APIENTRY glGetMultisamplefv(GLenum pname, GLuint index, GLfloat* val);
GLCOREAPI void APIENTRY glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64* params);
GLCOREAPI void APIENTRY glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void** params);
GLCOREAPI void APIENTRY glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizei size, void* data);
GLCOREAPI void APIENTRY glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint* param);
GLCOREAPI void APIENTRY glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei* length, GLchar* label);
GLCOREAPI void APIENTRY glGetObjectPtrLabel(const void* ptr, GLsizei bufSize, GLsizei* length, GLchar* label);
GLCOREAPI void APIENTRY glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei* length, GLenum* binaryFormat, void* binary);
GLCOREAPI void APIENTRY glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
GLCOREAPI void APIENTRY glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
GLCOREAPI void APIENTRY glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint* params);
GLCOREAPI GLuint APIENTRY glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar* name);
GLCOREAPI GLint APIENTRY glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar* name);
GLCOREAPI GLint APIENTRY glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar* name);
GLCOREAPI void APIENTRY glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei* length, GLchar* name);
GLCOREAPI void APIENTRY glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum* props, GLsizei bufSize, GLsizei* length, GLint* params);
GLCOREAPI void APIENTRY glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint* values);
GLCOREAPI void APIENTRY glGetProgramiv(GLuint program, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
GLCOREAPI void APIENTRY glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
GLCOREAPI void APIENTRY glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
GLCOREAPI void APIENTRY glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
GLCOREAPI void APIENTRY glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64* params);
GLCOREAPI void APIENTRY glGetQueryObjectiv(GLuint id, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64* params);
GLCOREAPI void APIENTRY glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint* params);
GLCOREAPI void APIENTRY glGetQueryiv(GLenum target, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint* params);
GLCOREAPI void APIENTRY glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat* params);
GLCOREAPI void APIENTRY glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
GLCOREAPI void APIENTRY glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision);
GLCOREAPI void APIENTRY glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* source);
GLCOREAPI void APIENTRY glGetShaderiv(GLuint shader, GLenum pname, GLint* params);
GLCOREAPI const GLubyte* APIENTRY glGetStringi(GLenum name, GLuint index);
GLCOREAPI GLuint APIENTRY glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar* name);
GLCOREAPI GLint APIENTRY glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar* name);
GLCOREAPI void APIENTRY glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei* length, GLint* values);
GLCOREAPI void APIENTRY glGetTexParameterIiv(GLenum target, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint* params);
GLCOREAPI void APIENTRY glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
GLCOREAPI void APIENTRY glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat* params);
GLCOREAPI void APIENTRY glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint* params);
GLCOREAPI void APIENTRY glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat* params);
GLCOREAPI void APIENTRY glGetTextureParameteriv(GLuint texture, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
GLCOREAPI void APIENTRY glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLsizei* size, GLenum* type, GLchar* name);
GLCOREAPI void APIENTRY glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64* param);
GLCOREAPI void APIENTRY glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint* param);
GLCOREAPI void APIENTRY glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint* param);
GLCOREAPI GLuint APIENTRY glGetUniformBlockIndex(GLuint program, const GLchar* uniformBlockName);
GLCOREAPI void APIENTRY glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar* const* uniformNames, GLuint* uniformIndices);
GLCOREAPI GLint APIENTRY glGetUniformLocation(GLuint program, const GLchar* name);
GLCOREAPI void APIENTRY glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint* params);
GLCOREAPI void APIENTRY glGetUniformdv(GLuint program, GLint location, GLdouble* params);
GLCOREAPI void APIENTRY glGetUniformfv(GLuint program, GLint location, GLfloat* params);
GLCOREAPI void APIENTRY glGetUniformiv(GLuint program, GLint location, GLint* params);
GLCOREAPI void APIENTRY glGetUniformuiv(GLuint program, GLint location, GLuint* params);
GLCOREAPI void APIENTRY glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64* param);
GLCOREAPI void APIENTRY glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint* param);
GLCOREAPI void APIENTRY glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint* param);
GLCOREAPI void APIENTRY glGetVertexAttribIiv(GLuint index, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint* params);
GLCOREAPI void APIENTRY glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble* params);
GLCOREAPI void APIENTRY glGetVertexAttribPointerv(GLuint index, GLenum pname, void** pointer);
GLCOREAPI void APIENTRY glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble* params);
GLCOREAPI void APIENTRY glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat* params);
GLCOREAPI void APIENTRY glGetVertexAttribiv(GLuint index, GLenum pname, GLint* params);
GLCOREAPI void APIENTRY glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void* pixels);
GLCOREAPI void APIENTRY glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void* pixels);
GLCOREAPI void APIENTRY glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble* params);
GLCOREAPI void APIENTRY glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat* params);
GLCOREAPI void APIENTRY glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint* params);
GLCOREAPI void APIENTRY glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint* params);
GLCOREAPI void APIENTRY glInvalidateBufferData(GLuint buffer);
GLCOREAPI void APIENTRY glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length);
GLCOREAPI void APIENTRY glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum* attachments);
GLCOREAPI void APIENTRY glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments);
GLCOREAPI void APIENTRY glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
GLCOREAPI void APIENTRY glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
GLCOREAPI void APIENTRY glInvalidateTexImage(GLuint texture, GLint level);
GLCOREAPI void APIENTRY glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
GLCOREAPI GLboolean APIENTRY glIsBuffer(GLuint buffer);
GLCOREAPI GLboolean APIENTRY glIsEnabledi(GLenum target, GLuint index);
GLCOREAPI GLboolean APIENTRY glIsFramebuffer(GLuint framebuffer);
GLCOREAPI GLboolean APIENTRY glIsProgram(GLuint program);
GLCOREAPI GLboolean APIENTRY glIsProgramPipeline(GLuint pipeline);
GLCOREAPI GLboolean APIENTRY glIsQuery(GLuint id);
GLCOREAPI GLboolean APIENTRY glIsRenderbuffer(GLuint renderbuffer);
GLCOREAPI GLboolean APIENTRY glIsSampler(GLuint sampler);
GLCOREAPI GLboolean APIENTRY glIsShader(GLuint shader);
GLCOREAPI GLboolean APIENTRY glIsSync(GLsync sync);
GLCOREAPI GLboolean APIENTRY glIsTransformFeedback(GLuint id);
GLCOREAPI GLboolean APIENTRY glIsVertexArray(GLuint array);
GLCOREAPI void APIENTRY glLinkProgram(GLuint program);
GLCOREAPI void* APIENTRY glMapBuffer(GLenum target, GLenum access);
GLCOREAPI void* APIENTRY glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
GLCOREAPI void* APIENTRY glMapNamedBuffer(GLuint buffer, GLenum access);
GLCOREAPI void* APIENTRY glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizei length, GLbitfield access);
GLCOREAPI void APIENTRY glMemoryBarrier(GLbitfield barriers);
GLCOREAPI void APIENTRY glMemoryBarrierByRegion(GLbitfield barriers);
GLCOREAPI void APIENTRY glMinSampleShading(GLfloat value);
GLCOREAPI void APIENTRY glMultiDrawArrays(GLenum mode, const GLint* first, const GLsizei* count, GLsizei drawcount);
GLCOREAPI void APIENTRY glMultiDrawArraysIndirect(GLenum mode, const void* indirect, GLsizei drawcount, GLsizei stride);
GLCOREAPI void APIENTRY glMultiDrawElements(GLenum mode, const GLsizei* count, GLenum type, const void* const* indices, GLsizei drawcount);
GLCOREAPI void APIENTRY glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei* count, GLenum type, const void* const* indices, GLsizei drawcount, const GLint* basevertex);
GLCOREAPI void APIENTRY glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void* indirect, GLsizei drawcount, GLsizei stride);
GLCOREAPI void APIENTRY glNamedBufferData(GLuint buffer, GLsizei size, const void* data, GLenum usage);
GLCOREAPI void APIENTRY glNamedBufferStorage(GLuint buffer, GLsizei size, const void* data, GLbitfield flags);
GLCOREAPI void APIENTRY glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizei size, const void* data);
GLCOREAPI void APIENTRY glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf);
GLCOREAPI void APIENTRY glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum* bufs);
GLCOREAPI void APIENTRY glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param);
GLCOREAPI void APIENTRY glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src);
GLCOREAPI void APIENTRY glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
GLCOREAPI void APIENTRY glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
GLCOREAPI void APIENTRY glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
GLCOREAPI void APIENTRY glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
GLCOREAPI void APIENTRY glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GLCOREAPI void APIENTRY glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar* label);
GLCOREAPI void APIENTRY glObjectPtrLabel(const void* ptr, GLsizei length, const GLchar* label);
GLCOREAPI void APIENTRY glPatchParameterfv(GLenum pname, const GLfloat* values);
GLCOREAPI void APIENTRY glPatchParameteri(GLenum pname, GLint value);
GLCOREAPI void APIENTRY glPauseTransformFeedback();
GLCOREAPI void APIENTRY glPointParameterf(GLenum pname, GLfloat param);
GLCOREAPI void APIENTRY glPointParameterfv(GLenum pname, const GLfloat* params);
GLCOREAPI void APIENTRY glPointParameteri(GLenum pname, GLint param);
GLCOREAPI void APIENTRY glPointParameteriv(GLenum pname, const GLint* params);
GLCOREAPI void APIENTRY glPopDebugGroup();
GLCOREAPI void APIENTRY glPrimitiveRestartIndex(GLuint index);
GLCOREAPI void APIENTRY glProgramBinary(GLuint program, GLenum binaryFormat, const void* binary, GLsizei length);
GLCOREAPI void APIENTRY glProgramParameteri(GLuint program, GLenum pname, GLint value);
GLCOREAPI void APIENTRY glProgramUniform1d(GLuint program, GLint location, GLdouble v0);
GLCOREAPI void APIENTRY glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble* value);
GLCOREAPI void APIENTRY glProgramUniform1f(GLuint program, GLint location, GLfloat v0);
GLCOREAPI void APIENTRY glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat* value);
GLCOREAPI void APIENTRY glProgramUniform1i(GLuint program, GLint location, GLint v0);
GLCOREAPI void APIENTRY glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint* value);
GLCOREAPI void APIENTRY glProgramUniform1ui(GLuint program, GLint location, GLuint v0);
GLCOREAPI void APIENTRY glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint* value);
GLCOREAPI void APIENTRY glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1);
GLCOREAPI void APIENTRY glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble* value);
GLCOREAPI void APIENTRY glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1);
GLCOREAPI void APIENTRY glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat* value);
GLCOREAPI void APIENTRY glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1);
GLCOREAPI void APIENTRY glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint* value);
GLCOREAPI void APIENTRY glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1);
GLCOREAPI void APIENTRY glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint* value);
GLCOREAPI void APIENTRY glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
GLCOREAPI void APIENTRY glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble* value);
GLCOREAPI void APIENTRY glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLCOREAPI void APIENTRY glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat* value);
GLCOREAPI void APIENTRY glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
GLCOREAPI void APIENTRY glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint* value);
GLCOREAPI void APIENTRY glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
GLCOREAPI void APIENTRY glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint* value);
GLCOREAPI void APIENTRY glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
GLCOREAPI void APIENTRY glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble* value);
GLCOREAPI void APIENTRY glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLCOREAPI void APIENTRY glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat* value);
GLCOREAPI void APIENTRY glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLCOREAPI void APIENTRY glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint* value);
GLCOREAPI void APIENTRY glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GLCOREAPI void APIENTRY glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint* value);
GLCOREAPI void APIENTRY glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLCOREAPI void APIENTRY glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLCOREAPI void APIENTRY glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLCOREAPI void APIENTRY glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLCOREAPI void APIENTRY glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLCOREAPI void APIENTRY glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLCOREAPI void APIENTRY glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLCOREAPI void APIENTRY glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLCOREAPI void APIENTRY glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLCOREAPI void APIENTRY glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLCOREAPI void APIENTRY glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLCOREAPI void APIENTRY glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLCOREAPI void APIENTRY glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLCOREAPI void APIENTRY glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLCOREAPI void APIENTRY glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLCOREAPI void APIENTRY glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLCOREAPI void APIENTRY glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLCOREAPI void APIENTRY glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLCOREAPI void APIENTRY glProvokingVertex(GLenum mode);
GLCOREAPI void APIENTRY glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar* message);
GLCOREAPI void APIENTRY glQueryCounter(GLuint id, GLenum target);
GLCOREAPI void APIENTRY glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void* data);
GLCOREAPI void APIENTRY glReleaseShaderCompiler();
GLCOREAPI void APIENTRY glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
GLCOREAPI void APIENTRY glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
GLCOREAPI void APIENTRY glResumeTransformFeedback();
GLCOREAPI void APIENTRY glSampleCoverage(GLfloat value, GLboolean invert);
GLCOREAPI void APIENTRY glSampleMaski(GLuint maskNumber, GLbitfield mask);
GLCOREAPI void APIENTRY glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint* param);
GLCOREAPI void APIENTRY glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint* param);
GLCOREAPI void APIENTRY glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
GLCOREAPI void APIENTRY glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat* param);
GLCOREAPI void APIENTRY glSamplerParameteri(GLuint sampler, GLenum pname, GLint param);
GLCOREAPI void APIENTRY glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint* param);
GLCOREAPI void APIENTRY glScissorArrayv(GLuint first, GLsizei count, const GLint* v);
GLCOREAPI void APIENTRY glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
GLCOREAPI void APIENTRY glScissorIndexedv(GLuint index, const GLint* v);
GLCOREAPI void APIENTRY glShaderBinary(GLsizei count, const GLuint* shaders, GLenum binaryformat, const void* binary, GLsizei length);
GLCOREAPI void APIENTRY glShaderSource(GLuint shader, GLsizei count, const GLchar* const* string, const GLint* length);
GLCOREAPI void APIENTRY glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
GLCOREAPI void APIENTRY glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
GLCOREAPI void APIENTRY glStencilMaskSeparate(GLenum face, GLuint mask);
GLCOREAPI void APIENTRY glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
GLCOREAPI void APIENTRY glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer);
GLCOREAPI void APIENTRY glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
GLCOREAPI void APIENTRY glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLCOREAPI void APIENTRY glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void* pixels);
GLCOREAPI void APIENTRY glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLCOREAPI void APIENTRY glTexParameterIiv(GLenum target, GLenum pname, const GLint* params);
GLCOREAPI void APIENTRY glTexParameterIuiv(GLenum target, GLenum pname, const GLuint* params);
GLCOREAPI void APIENTRY glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
GLCOREAPI void APIENTRY glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
GLCOREAPI void APIENTRY glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLCOREAPI void APIENTRY glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
GLCOREAPI void APIENTRY glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLCOREAPI void APIENTRY glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
GLCOREAPI void APIENTRY glTextureBarrier();
GLCOREAPI void APIENTRY glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer);
GLCOREAPI void APIENTRY glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizei size);
GLCOREAPI void APIENTRY glTextureParameterIiv(GLuint texture, GLenum pname, const GLint* params);
GLCOREAPI void APIENTRY glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint* params);
GLCOREAPI void APIENTRY glTextureParameterf(GLuint texture, GLenum pname, GLfloat param);
GLCOREAPI void APIENTRY glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat* param);
GLCOREAPI void APIENTRY glTextureParameteri(GLuint texture, GLenum pname, GLint param);
GLCOREAPI void APIENTRY glTextureParameteriv(GLuint texture, GLenum pname, const GLint* param);
GLCOREAPI void APIENTRY glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
GLCOREAPI void APIENTRY glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
GLCOREAPI void APIENTRY glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
GLCOREAPI void APIENTRY glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
GLCOREAPI void APIENTRY glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
GLCOREAPI void APIENTRY glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void* pixels);
GLCOREAPI void APIENTRY glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
GLCOREAPI void APIENTRY glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void* pixels);
GLCOREAPI void APIENTRY glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
GLCOREAPI void APIENTRY glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer);
GLCOREAPI void APIENTRY glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizei size);
GLCOREAPI void APIENTRY glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar* const* varyings, GLenum bufferMode);
GLCOREAPI void APIENTRY glUniform1d(GLint location, GLdouble x);
GLCOREAPI void APIENTRY glUniform1dv(GLint location, GLsizei count, const GLdouble* value);
GLCOREAPI void APIENTRY glUniform1f(GLint location, GLfloat v0);
GLCOREAPI void APIENTRY glUniform1fv(GLint location, GLsizei count, const GLfloat* value);
GLCOREAPI void APIENTRY glUniform1i(GLint location, GLint v0);
GLCOREAPI void APIENTRY glUniform1iv(GLint location, GLsizei count, const GLint* value);
GLCOREAPI void APIENTRY glUniform1ui(GLint location, GLuint v0);
GLCOREAPI void APIENTRY glUniform1uiv(GLint location, GLsizei count, const GLuint* value);
GLCOREAPI void APIENTRY glUniform2d(GLint location, GLdouble x, GLdouble y);
GLCOREAPI void APIENTRY glUniform2dv(GLint location, GLsizei count, const GLdouble* value);
GLCOREAPI void APIENTRY glUniform2f(GLint location, GLfloat v0, GLfloat v1);
GLCOREAPI void APIENTRY glUniform2fv(GLint location, GLsizei count, const GLfloat* value);
GLCOREAPI void APIENTRY glUniform2i(GLint location, GLint v0, GLint v1);
GLCOREAPI void APIENTRY glUniform2iv(GLint location, GLsizei count, const GLint* value);
GLCOREAPI void APIENTRY glUniform2ui(GLint location, GLuint v0, GLuint v1);
GLCOREAPI void APIENTRY glUniform2uiv(GLint location, GLsizei count, const GLuint* value);
GLCOREAPI void APIENTRY glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z);
GLCOREAPI void APIENTRY glUniform3dv(GLint location, GLsizei count, const GLdouble* value);
GLCOREAPI void APIENTRY glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
GLCOREAPI void APIENTRY glUniform3fv(GLint location, GLsizei count, const GLfloat* value);
GLCOREAPI void APIENTRY glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
GLCOREAPI void APIENTRY glUniform3iv(GLint location, GLsizei count, const GLint* value);
GLCOREAPI void APIENTRY glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
GLCOREAPI void APIENTRY glUniform3uiv(GLint location, GLsizei count, const GLuint* value);
GLCOREAPI void APIENTRY glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLCOREAPI void APIENTRY glUniform4dv(GLint location, GLsizei count, const GLdouble* value);
GLCOREAPI void APIENTRY glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
GLCOREAPI void APIENTRY glUniform4fv(GLint location, GLsizei count, const GLfloat* value);
GLCOREAPI void APIENTRY glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
GLCOREAPI void APIENTRY glUniform4iv(GLint location, GLsizei count, const GLint* value);
GLCOREAPI void APIENTRY glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
GLCOREAPI void APIENTRY glUniform4uiv(GLint location, GLsizei count, const GLuint* value);
GLCOREAPI void APIENTRY glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
GLCOREAPI void APIENTRY glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLCOREAPI void APIENTRY glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLCOREAPI void APIENTRY glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLCOREAPI void APIENTRY glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLCOREAPI void APIENTRY glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLCOREAPI void APIENTRY glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLCOREAPI void APIENTRY glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLCOREAPI void APIENTRY glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLCOREAPI void APIENTRY glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLCOREAPI void APIENTRY glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLCOREAPI void APIENTRY glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLCOREAPI void APIENTRY glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLCOREAPI void APIENTRY glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLCOREAPI void APIENTRY glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLCOREAPI void APIENTRY glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLCOREAPI void APIENTRY glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLCOREAPI void APIENTRY glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble* value);
GLCOREAPI void APIENTRY glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
GLCOREAPI void APIENTRY glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint* indices);
GLCOREAPI GLboolean APIENTRY glUnmapBuffer(GLenum target);
GLCOREAPI GLboolean APIENTRY glUnmapNamedBuffer(GLuint buffer);
GLCOREAPI void APIENTRY glUseProgram(GLuint program);
GLCOREAPI void APIENTRY glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program);
GLCOREAPI void APIENTRY glValidateProgram(GLuint program);
GLCOREAPI void APIENTRY glValidateProgramPipeline(GLuint pipeline);
GLCOREAPI void APIENTRY glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
GLCOREAPI void APIENTRY glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
GLCOREAPI void APIENTRY glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLCOREAPI void APIENTRY glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLCOREAPI void APIENTRY glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor);
GLCOREAPI void APIENTRY glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer);
GLCOREAPI void APIENTRY glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
GLCOREAPI void APIENTRY glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint* buffers, const GLintptr* offsets, const GLsizei* strides);
GLCOREAPI void APIENTRY glVertexAttrib1d(GLuint index, GLdouble x);
GLCOREAPI void APIENTRY glVertexAttrib1dv(GLuint index, const GLdouble* v);
GLCOREAPI void APIENTRY glVertexAttrib1f(GLuint index, GLfloat x);
GLCOREAPI void APIENTRY glVertexAttrib1fv(GLuint index, const GLfloat* v);
GLCOREAPI void APIENTRY glVertexAttrib1s(GLuint index, GLshort x);
GLCOREAPI void APIENTRY glVertexAttrib1sv(GLuint index, const GLshort* v);
GLCOREAPI void APIENTRY glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
GLCOREAPI void APIENTRY glVertexAttrib2dv(GLuint index, const GLdouble* v);
GLCOREAPI void APIENTRY glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
GLCOREAPI void APIENTRY glVertexAttrib2fv(GLuint index, const GLfloat* v);
GLCOREAPI void APIENTRY glVertexAttrib2s(GLuint index, GLshort x, GLshort y);
GLCOREAPI void APIENTRY glVertexAttrib2sv(GLuint index, const GLshort* v);
GLCOREAPI void APIENTRY glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
GLCOREAPI void APIENTRY glVertexAttrib3dv(GLuint index, const GLdouble* v);
GLCOREAPI void APIENTRY glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
GLCOREAPI void APIENTRY glVertexAttrib3fv(GLuint index, const GLfloat* v);
GLCOREAPI void APIENTRY glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
GLCOREAPI void APIENTRY glVertexAttrib3sv(GLuint index, const GLshort* v);
GLCOREAPI void APIENTRY glVertexAttrib4Nbv(GLuint index, const GLbyte* v);
GLCOREAPI void APIENTRY glVertexAttrib4Niv(GLuint index, const GLint* v);
GLCOREAPI void APIENTRY glVertexAttrib4Nsv(GLuint index, const GLshort* v);
GLCOREAPI void APIENTRY glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
GLCOREAPI void APIENTRY glVertexAttrib4Nubv(GLuint index, const GLubyte* v);
GLCOREAPI void APIENTRY glVertexAttrib4Nuiv(GLuint index, const GLuint* v);
GLCOREAPI void APIENTRY glVertexAttrib4Nusv(GLuint index, const GLushort* v);
GLCOREAPI void APIENTRY glVertexAttrib4bv(GLuint index, const GLbyte* v);
GLCOREAPI void APIENTRY glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLCOREAPI void APIENTRY glVertexAttrib4dv(GLuint index, const GLdouble* v);
GLCOREAPI void APIENTRY glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
GLCOREAPI void APIENTRY glVertexAttrib4fv(GLuint index, const GLfloat* v);
GLCOREAPI void APIENTRY glVertexAttrib4iv(GLuint index, const GLint* v);
GLCOREAPI void APIENTRY glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
GLCOREAPI void APIENTRY glVertexAttrib4sv(GLuint index, const GLshort* v);
GLCOREAPI void APIENTRY glVertexAttrib4ubv(GLuint index, const GLubyte* v);
GLCOREAPI void APIENTRY glVertexAttrib4uiv(GLuint index, const GLuint* v);
GLCOREAPI void APIENTRY glVertexAttrib4usv(GLuint index, const GLushort* v);
GLCOREAPI void APIENTRY glVertexAttribBinding(GLuint attribindex, GLuint bindingindex);
GLCOREAPI void APIENTRY glVertexAttribDivisor(GLuint index, GLuint divisor);
GLCOREAPI void APIENTRY glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
GLCOREAPI void APIENTRY glVertexAttribI1i(GLuint index, GLint x);
GLCOREAPI void APIENTRY glVertexAttribI1iv(GLuint index, const GLint* v);
GLCOREAPI void APIENTRY glVertexAttribI1ui(GLuint index, GLuint x);
GLCOREAPI void APIENTRY glVertexAttribI1uiv(GLuint index, const GLuint* v);
GLCOREAPI void APIENTRY glVertexAttribI2i(GLuint index, GLint x, GLint y);
GLCOREAPI void APIENTRY glVertexAttribI2iv(GLuint index, const GLint* v);
GLCOREAPI void APIENTRY glVertexAttribI2ui(GLuint index, GLuint x, GLuint y);
GLCOREAPI void APIENTRY glVertexAttribI2uiv(GLuint index, const GLuint* v);
GLCOREAPI void APIENTRY glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z);
GLCOREAPI void APIENTRY glVertexAttribI3iv(GLuint index, const GLint* v);
GLCOREAPI void APIENTRY glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z);
GLCOREAPI void APIENTRY glVertexAttribI3uiv(GLuint index, const GLuint* v);
GLCOREAPI void APIENTRY glVertexAttribI4bv(GLuint index, const GLbyte* v);
GLCOREAPI void APIENTRY glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
GLCOREAPI void APIENTRY glVertexAttribI4iv(GLuint index, const GLint* v);
GLCOREAPI void APIENTRY glVertexAttribI4sv(GLuint index, const GLshort* v);
GLCOREAPI void APIENTRY glVertexAttribI4ubv(GLuint index, const GLubyte* v);
GLCOREAPI void APIENTRY glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
GLCOREAPI void APIENTRY glVertexAttribI4uiv(GLuint index, const GLuint* v);
GLCOREAPI void APIENTRY glVertexAttribI4usv(GLuint index, const GLushort* v);
GLCOREAPI void APIENTRY glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLCOREAPI void APIENTRY glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
GLCOREAPI void APIENTRY glVertexAttribL1d(GLuint index, GLdouble x);
GLCOREAPI void APIENTRY glVertexAttribL1dv(GLuint index, const GLdouble* v);
GLCOREAPI void APIENTRY glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y);
GLCOREAPI void APIENTRY glVertexAttribL2dv(GLuint index, const GLdouble* v);
GLCOREAPI void APIENTRY glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
GLCOREAPI void APIENTRY glVertexAttribL3dv(GLuint index, const GLdouble* v);
GLCOREAPI void APIENTRY glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
GLCOREAPI void APIENTRY glVertexAttribL4dv(GLuint index, const GLdouble* v);
GLCOREAPI void APIENTRY glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
GLCOREAPI void APIENTRY glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
GLCOREAPI void APIENTRY glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLCOREAPI void APIENTRY glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
GLCOREAPI void APIENTRY glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLCOREAPI void APIENTRY glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
GLCOREAPI void APIENTRY glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLCOREAPI void APIENTRY glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
GLCOREAPI void APIENTRY glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
GLCOREAPI void APIENTRY glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint* value);
GLCOREAPI void APIENTRY glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer);
GLCOREAPI void APIENTRY glVertexBindingDivisor(GLuint bindingindex, GLuint divisor);
GLCOREAPI void APIENTRY glViewportArrayv(GLuint first, GLsizei count, const GLfloat* v);
GLCOREAPI void APIENTRY glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
GLCOREAPI void APIENTRY glViewportIndexedfv(GLuint index, const GLfloat* v);
GLCOREAPI void APIENTRY glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);

GLCOREAPI BOOL APIENTRY wglSwapIntervalEXT(int interval);
#ifdef __cplusplus
}
#endif

#endif  // INCLUDED_GL_API
